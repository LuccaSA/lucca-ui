/*
 * grunt-lui-build
 * https://github.com/luccaSA/grunt-lui-build
 *
 * Copyright (c) 2016 Beno√Æt PAUGAM
 * Licensed under the MIT license.
 */

'use strict';

var path = require('path'),
	yaml = require('js-yaml'),
	_ = require('lodash');

module.exports = function(grunt) {
	var basePath = process.cwd() + '/',
		options = {},
		strictOption = false,
		yamlSchema = null,
		theme = {},
		customTypes = {
			'!theme mapping': function(values, yamlLoader) {
				var theme = luiTheme('core', values.family, values.object);
				var props = values.property.split('.');
				var result = theme;
				for (var i = 0; i < props.length; i++) {
					result = result[props[i]];
				}
				return result;
			},

			'!palette mapping': function(values, yamlLoader) {
				var palettes = luiTheme('core', 'references', 'palettes');

				var palette = palettes.colors[values.palette];
				return (values.property) ? // Was a specific property asked ?
					(values.manipulation) ? // Was a color manipulation asked ?
						palettes.manipulations[values.manipulation][0] + '(' + palette[values.property] + ', ' + palettes.manipulations[values.manipulation][1] + ')'
					: palette[values.property]
				: values.palette;
			},

			'!rem scalar': function(value, yamlLoader) {
				var rem = parseFloat(luiTheme('core', 'elements', 'typography')['body']['fontSize']),
					result = (value * rem) + 'px';
				return result;
			}
		};
		// customTypes = require('../lib/yaml-custom-types').types;

	// Yaml file loader
	// @return
	function loadYamlFile(filepath) {
		var data = grunt.file.read(filepath, options);

		try {
			return yaml.safeLoad(data, {
				schema: yamlSchema,
				filename: filepath,
				strict: strictOption
			});
		} catch (e) {
			grunt.warn(e);
			return null;
		}
	}

	/*
	 * Retrieve theme variables from cached json or load it from file if need be
	 * @return Object
	 */
	function luiTheme(section, family, objectName) {
		var loadingNeeded = false,
			progress = theme;
		_.each(['theme', section, family, objectName], function(prop) {

			if (!_.has(progress, prop)) {
				loadingNeeded = true;
				return;
			}
			progress = progress[prop];
		});
		if (loadingNeeded)
			return loadTheme(section, family, objectName);
		else
			return theme['theme'][section][family][objectName];
	};

	/*
	 * Load theme variables from file
	 * @return Object
	 */
	function loadTheme(section, family, objectName) {
		var relPath = ['', section, family, objectName + '.yml'].join('/'),
			defaultThemeFilePath = basePath + options.defaultThemeBasePath + relPath,
			customThemeFilePath = options.customThemeBasePath ? basePath + options.customThemeFilePath + relPath : null,
			defaultTheme = loadYamlFile(defaultThemeFilePath, options),
			customTheme = (customThemeFilePath) ? loadYamlFile(customThemeFilePath, options) : {},
			result = _.merge(defaultTheme, customTheme);

		theme = _.merge(theme, result);

		return theme['theme'][section][family][objectName];
	}

	/*
	 * Creates the YAML schema with custom types
	 * @return YAMLSchema
	 */
	function createYamlSchema(customTypes) {
		var yamlTypes = [];

		_.each(customTypes, function(resolver, tagAndKindString) {
			var tagAndKind = tagAndKindString.split(/\s+/);

			var yamlType = new yaml.Type(tagAndKind[0], {
				kind: tagAndKind[1],
				construct: function(data) {
					var result = resolver.call(this, data, loadYamlFile);
					if (_.isUndefined(result) || _.isFunction(result)) {
						return null;
					} else {
						return result;
					}
				}
			});

			yamlTypes.push(yamlType);
		});
		return yaml.Schema.create(yamlTypes);
	}

	grunt.registerMultiTask('lui-build', 'Build Lucca-UI theme json file', function()
	{
		options = this.options(
			{
				strict: false,

				defaultThemeBasePath: 'scss/themes/default',
				customThemeBasePath: null,
				dest: 'scss/themes/default/theme.json',

				// Ignored files regex
				ignored: null,

				// JSON formatting indentation
				space: 4
			}
		);
		var build = (typeof options.build === 'object') ? options.build : require(basePath + options.build),
			core = build.core;

		strictOption = options.strict;
		yamlSchema = createYamlSchema(customTypes);

		// Build core
		_.each(core, function(objects, family) {
			_.each(objects, function(object) {
				luiTheme('core', family, object, options);
			});
		});

		grunt.file.write(basePath + options.dest, JSON.stringify(theme, null, options.space), {encoding: grunt.file.defaultEncoding});
		grunt.log.writeln('Compiled theme! -> ' + options.dest.cyan);
	});
}
