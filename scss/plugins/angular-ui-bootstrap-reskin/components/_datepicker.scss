@if map-get($pluginVars, enabled) {
	#{$prefix}.datepicker {
		@extend %lui_input_holder_base;
		> input {
			@extend %lui_input_field_base; @extend %lui_input_text_field;
			&.invalid,
			&.ng-invalid {
				@extend %lui_invalid_input_base;
			}
		}

		button { @extend button#{$prefix}.unstyled; }
		button[disabled] { opacity: 0.5; cursor: default; }

		// IE 9 fix
		overflow: visible !important;

		&:not([role="application"]) {
			@include lui_make_icon("calendar", right);
			> input { padding-right: 2.5em; width: map-gets($pluginVars, datepicker, inputWidth); }
			&:before, &:after {
				cursor: text;
				display: inline-block;
				position: absolute;
				top: 50%; right: 1em;
				-ms-transform: translate(0, -50%);
				transform: translate(0, -50%);
				@extend %lui_user_select_none;
				pointer-events: none;
			}
		}

		// Datepicker styling
		&[role="application"], .dropdown-menu {
			z-index: map-gets($pluginVars, datepicker, dropdownZindex);
			background-color: map-gets($pluginVars, datepicker, background);
		}

		// Datepicker in dropdown
		.dropdown-menu {
			@extend ul#{$prefix}.unstyled;
			position: absolute;
			left: 0; top: 100%;
			margin-top: -1px;

			&:not(.ng-leave) {
				@include lui_is_animated("down fade in");
			}
			&.ng-leave {
				@include lui_is_animated("down fade out");
			}
			@extend #{$prefix}.raised;
		}

		.uib-daypicker, .uib-monthpicker, .uib-yearpicker {
			table-layout: fixed;
			width: map-gets($pluginVars, datepicker, width); margin-bottom: 0.5em;
			&:focus { outline: 0; }
			text-align: center;

			thead tr {
				// Month & year
				small {
					display: block;
					font-weight: normal;
					font-size: lui_rem(1);
					padding: 0.25em 0;
				}
				th:first-child button,
				th:last-child button {
					@extend #{$prefix}.button;
					@extend a#{$prefix}.button;
					font-size: luiTheme(reference, sizes, small);
				}
				th:nth-child(2) {
					font-size: 1.25em;
					&:hover { background-color: luiPalette(light, color, light); }
				}
			}

			tbody tr {
				td {
					width: 3em;
					&:not(.h6) {
						border-top: 1px solid luiPalette(light, color);
						border-left: 1px solid luiPalette(light, color);
						width: 1em;
						&:last-child {
							border-right: 1px solid luiPalette(light, color);
						}
					}
				}
				&:last-child td:not(.h6) {
					border-bottom: 1px solid luiPalette(light, color);
				}
				button {
					padding: 0.5em 0;
					color: luiPalette(grey, color);
					@include lui_transition_properties(background-color);

					&:not([disabled]):hover { background-color: #EEE; }

					&.active, &.active:hover {
						color: luiPalette(primary, text);
						background-color: luiPalette(primary, color);
					}
				}
				.text-muted { color: luiPalette(light, color); }
			}
		}

		.pull-left { float: left; }
		.pull-right { float: right; }
		.glyphicon-chevron-left { @include lui_make_icon("west arrow"); &:before { margin: 0; } }
		.glyphicon-chevron-right { @include lui_make_icon("east arrow"); &:before { margin: 0; } }

		li[ng-if="showButtonBar"] {
			@extend #{$prefix}.clear;
			border-top: 1px solid map-gets($inputVars, borderColor);
			.btn {
				@extend %lui_basic_button;
			}
		}
	}
}
