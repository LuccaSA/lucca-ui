@if luiTheme(element, field, momentpicker, enabled) {
	@at-root #{$namespace} {
		$vars: luiTheme(element, field, momentpicker);

		luid-moment {
			display: inline-block;
			max-width:  map-gets($vars, max-width);
			overflow: visible !important; // Buttons

			> .lui.moment.input > input {
				text-align: center;
				width: map-gets($vars, width);
			}

			.mp-button {
				width: luiTheme(element, field, input, font-size) * (map-gets($vars, width) / (map-gets($vars, width) * 0 + 1));
				position: absolute;
				cursor: pointer;

				&:before {
					font-size: 0.75em;
				}

				&.top {
					bottom: 100%;
					margin-bottom: -0.25em;
				}
				&.left {
					left: 0;
				}
				&.right {
					right: 0;
				}
				&.bottom {
					top: 100%;
					margin-top: 0.25em;
				}
			}
		}

		// 	@extend %lui_input_holder_base;
		//
		// 	> .luid-moment {
		// 		@extend %lui_input_field_base;
		// 		padding: 0 !important;
		// 	}
		//
		// 	&:active, &:focus {
		// 		box-shadow: none;
		// 	}
		//
		// 	// styling the inputs inside the directive
		// 	input {
		// 		box-sizing: border-box;
		// 		&:first-child { padding-left: map-gets($vars, padding, left); }
		// 		&:last-child { padding-right: map-gets($vars, padding, right); }
		// 		line-height: (1em + map-gets($vars, padding, top) +  map-gets($vars, padding, bottom));
		// 		display: inline-block;
		//
		// 		&:focus, &:active {
		// 			outline: none;
		// 			box-shadow: none;
		// 		}
		//
		// 		background-color: transparent;
		// 		border: none;
		// 		width: map-gets($vars, momentpicker, width);
		// 		&:nth-child(1) { text-align: right; }
		//
		// 		height: 1 + map-gets($vars, padding, top) + map-gets($vars, padding, bottom); // For any version of IE...
		// 	}
		// 	// buttons + -
		// 	.mp-button {
		// 		line-height: 1.5em;
		// 		@extend %lui_user_select_none;
		// 		font-size: 75%;
		// 		position: absolute;
		// 		z-index: 999;
		// 		cursor: pointer;
		// 		width: 50%;
		// 		text-align: center;
		// 		color: #FFF;
		// 		background-color: map-gets($vars, borderColor);
		//
		// 		// Positions
		// 		&.top { bottom: 100%; }
		// 		&.bottom { top: 100%; }
		// 		&.left { left: 0; }
		// 		&.right { right: 0; }
		// 	}
		// }
		//
		// // Invalid field
		// luid-moment.invalid .luid-moment,
		// luid-moment.ng-invalid .luid-moment {
		// 	@extend %lui_invalid_input_base;
		// 	.mp-button { background-color: map-gets($vars, invalidColor) !important; }
		// }
		//
		// #{$prefix}.inline.field {
		// 	label + luid-moment {
		// 		margin-left: 0.5em;
		// 	}
		// }
	}
}
