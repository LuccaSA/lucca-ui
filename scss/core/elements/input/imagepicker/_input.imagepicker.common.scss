@at-root #{$namespace} {

	@if luiTheme(element, field, image-picker, enabled) {
		$vars: luiTheme(element, field, image-picker);

		luid-image-picker {
			display: inline-block;
			width: 100%;
			height: 100%;

			> div { height: 100%; }

			.luid-image-picker-picture {
				background-color: map-gets($vars, default-background-color); // Pick a neutral grey color for white transparent images
				text-align: center;
				position: relative;
				width: 100%;
				height: 100%;
				border-image-width: 0;

				.input-overlay,
				.upload-overlay {
					position: absolute;
					left: 0;
					bottom: 0;
					right: 0;
					overflow: hidden;
					opacity: map-gets($vars, overlay, opacity);
					color: map-gets($vars, overlay, color);
					transition: map-gets($vars, overlay, transition);
				}

				.input-overlay {
					font-size: lui_rem(1);
					text-align: center;
					> span {
						position: absolute;
						left: 0; right: 0;
					}
					.cross {
						position: absolute;
						top: 0;
						right: 0;
						cursor: pointer;
					}
				}

				input[type="file"] {
					cursor: pointer;
					vertical-align: top;
					font-size: 0;
					height: 100%;
					width: 100%;
					opacity: 0;
					cursor: pointer;
					text-indent: -100%;
				}

				.loader {
					position: absolute;
					top: 50%; left: 50%;
					transform: translate(-50%, -50%);
				}
			}
			&[disabled="disabled"] {
				color: red;
				.input-overlay {
					display: none !important;
				}
			}

			&.uploading {
				.input-overlay { display: none; }
				.upload-overlay { height: 100%; }
			}
			&.round {
				.luid-image-picker-picture {
					border-radius: 50%;
				}
			}
		}
		.luid-cropper {
			background: map-gets($vars, cropper, bg-color);
			overflow: hidden;
			height: map-gets($vars, cropper, height);

			// copy pasted from the bower component
			> img-crop {
				width: 100%;
				height: 100%;
				display: block;
				position: relative;
				overflow: hidden;
				canvas {
					display: block;
					position: absolute;
					top: 50%;
					left: 50%;
					outline: none;
					-webkit-tap-highlight-color: rgba(255, 255, 255, 0);
				}
				.loading {
					width: 100%;
					height: 100%;
					font-size: 16px;
					font-weight: bold;
					display: flex;
					display: -webkit-flex;
					align-items: center;
					-webkit-align-items: center;
					justify-content: center;
					-webkit-justify-content: center;
					color: white;
					background-color: rgba(0, 0, 0, 0.75);
					position: absolute;
				}
			}
		}

		// In a field
		// ====
		#{$prefix}.field {
			luid-image-picker {
				margin-top: 0.5em;
				width: map-gets($vars, size) !important;

				border-bottom: luiTheme(element, field, field, focus-border-width) solid transparent;
				margin-bottom: -#{luiTheme(element, field, field, focus-border-width)};

				&.ng-touched.ng-invalid {
					border-bottom-color: luiTheme(element, field, invalid-color);
				}
			}

			// 4:3 ratio
			&.landscape luid-image-picker {
				width: 4 * (map-gets($vars, size) / 3);
				height: map-gets($vars, size);
			}
			&.portrait luid-image-picker {
				width: 3 * (map-gets($vars, size) / 4);
				height: map-gets($vars, size);
			}

			// Supports sizing
			@each $name, $sizeEms in map-gets($luiTheme, references, sizes) {
				&.#{$name} > luid-image-picker {
					font-size: $sizeEms;
				}
			}
		}
	}
}
