@if theme(elements, table, enabled) {
	@at-root #{$namespace} {
		$vars: theme(elements, table);

		#{$prefix}.table {
			display: table;
			table-layout: fixed;
			width: 100%;
			border-spacing: 0;
			border-collapse: collapse;
			text-align: result($vars, textAlignment);
			margin: (result($vars, verticalMargin)) (result($vars, horizontalMargin));
			background-color: result($vars, background);

			> .thead .tr, > .tbody .tr,
			> thead tr, > tbody tr {
				display: table;
				table-layout: fixed;
				width: 100%;
			}

			> .thead > .tr:not(:first-child) > .th, > .tbody > .tr:not(:first-child) > .td,
			> thead > tr:not(:first-child) > th, > tbody > tr:not(:first-child) > td {
				border-top: result($vars, border);
			}

			> .thead > .tr > .th, > .tbody > .tr > .td,
			> thead > tr > th, > tbody > tr > td {
				display: table-cell;
				float: none;
				vertical-align: top;
				padding: result($vars, padding);
			}

			// thead
			// ====
			> .thead, > thead {
				display: table-header-group;
				padding: result($vars, padding);
				border: result($vars, border);
			}
			> .thead > .tr > .th, > thead > tr > th {
				font-weight: 600;
				padding-top: 1em;
				padding-bottom: 1em;
				vertical-align: middle;
			}

			// tbody
			// ====
			> .tbody, > tbody {
				display: table-row-group;
				border: result($vars, border);
				border-top: none;
				background-color: result($vars, background);
			}

			// Zebra table
			// ====
			&.zebra {
				> tbody > tr, .tbody > .tr {
					border: none;
					&:nth-child(odd) {
						background-color: result($vars, zebraBackground);
					}
				}
			}

			// Verticaly aligned
			// ====
			&[class*="vertically aligned table"] {
				vertical-align: middle;

				> tbody > tr > td,
				> .tbody > .tr > .td,
				> thead > tr > th,
				> .thead > .tr > .th {
					vertical-align: middle;
					float: none;
				}
			}
		}


		// Coloring support
		// ===================================
		#{$prefix}.table {
			.tr > .th:first-child,
			.tr > .td:first-child,
			tr > th:first-child,
			tr > td:first-child {

				display: table-cell;
				position: relative;
				box-sizing: border-box;
				&:after {
					visibility: visible !important; // Neutralises possible clearfix
					position: absolute;
					z-index: 2;
					display: block;
					content: "";
					top: 0px; bottom: -1px; left: -1px;
					width: result($vars, coloredBorderWidth);
					min-height: 100%;
				}
			}
		}

		#{$prefix}.table tr,
		#{$prefix}.table .tr {
			@each $name, $scheme in luiPalettes() {
				&.#{map-get($scheme, class)} {
					> .th:first-child:after,
					> .td:first-child:after,
					> th:first-child:after,
					> td:first-child:after { background: map-get($scheme, color); }
				}
			}
		}
	}
}
