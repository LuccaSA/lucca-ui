@if theme(elements, tablegrid, enabled) {
	@at-root #{$namespace} {
		$vars: theme(elements, tablegrid);

		#{$prefix}.tablegrid {
			position: relative;
			overflow: hidden;

			// Common
			// ====
			text-align: result($vars, textAlignment);

			table {
				table-layout: fixed;
				width: 100%;
				min-height: 1px;
			}

			// Columns
			// ====
			.locked.columns {
				position: absolute;
				overflow: hidden;
				z-index: 3;
				top: 0; bottom: 0; left: 0; right: 0;

				// table { height: 100%; }

				thead {
					z-index: 4;
				}
			}
			.holder {
				overflow: hidden;
			}
			.scrollable.columns {
				z-index: 1;
				overflow: auto;

				thead {
					z-index: 2;
				}
			}

			// Cells
			// ====
			th, td {
				padding: result($vars, cell, padding);
				box-sizing: border-box;

				border: 1px solid luiPalette(light, color);

				&.sortable {
					cursor: pointer;
					-webkit-touch-callout: none;
					-webkit-user-select: none;
					-khtml-user-select: none;
					-moz-user-select: none;
					-ms-user-select: none;
					user-select: none;

					&.asc {
						@include lui_make_icon("south arrow");
					}
					&.desc {
						@include lui_make_icon("north arrow");
					}
					&:before {
						float: right;
						font-size: 0.6em;
						padding: 0.5em;
						line-height: 1;
						border-radius: theme(adjectives, rounded, radius);
						color: result($vars, header, background);
						background-color: result($vars, header, text);
					}
				}
			}

			thead, tbody {
				display: table;
				width: auto;
				box-sizing: border-box;
				table-layout: fixed;
			}

			// Header
			// ====
			thead {
				position: absolute; top: 0;
				min-width: 100%;
				color: result($vars, header, text);
				font-weight: result($vars, header, fontWeight);
				text-align: result($vars, header, textAlignment);

				a {
					color: result($vars, header, text);
					text-decoration: none;
				}

				th {
					background-color: result($vars, header, background);
					vertical-align: bottom;
					border-color: result($vars, header, borderColor);
				}
				tr:not(.filters) th:not([colspan]) {
					padding-top: result($vars, header, cellPaddingTop);
				}
			}


			// Body
			// ====
			tbody {
				min-width: 100%;
				height: auto;
				background-color: result($vars, background);
			}


			// Styles
			// ====
			&.zebra {
				tbody > tr:nth-child(2n) {
					background-color: result($vars, rows, zebraColor);
				}
			}

			// Hover color
			tr.hovering {
				background-color: result($vars, rows, hoverColor) !important;
			}

			// IE9: no support for locked columns
			.ie9 & {
				padding-top: 0 !important;
				thead {
					position: static;
				}
				.scrollable.columns,
				.scrollable.columns .virtualscroll {
					margin-left: 0 !important;
				}
				.locked.columns {
					display: none;
				}
			}
		}
	}
}
