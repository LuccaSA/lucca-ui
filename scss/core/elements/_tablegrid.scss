#{$prefix}.tablegrid {
	position: relative;

	// Common
	// ====
	text-align: map-gets($vars, textAlignment);

	table {
		table-layout: fixed;
		min-width: 100%;
		position: absolute;
	}

	// Columns
	// ====
	.locked.columns {
		overflow: hidden;
		position: absolute;
		z-index: 3;
		top: 0; bottom: 0; left: 0; right: 0;

		table { height: 100%; }

		thead {
			z-index: 4;
		}
	}
	.relative,
	.scrollable.columns {
		position: relative;
	}
	.scrollable.columns {
		z-index: 1;
		overflow: auto;

		thead {
			z-index: 2;
		}
	}

	// Cells
	// ====
	th, td {
		padding: map-gets($vars, cell, padding);
		box-sizing: border-box;

		border: 1px solid luiPalette(light, color);

		&.sortable {
			cursor: pointer;
			-webkit-touch-callout: none;
			-webkit-user-select: none;
			-khtml-user-select: none;
			-moz-user-select: none;
			-ms-user-select: none;
			user-select: none;

			&.asc {
				@include lui_make_icon("south arrow");
			}
			&.desc {
				@include lui_make_icon("north arrow");
			}
			&:before {
				float: right;
				font-size: 0.6em;
				padding: 0.5em;
				line-height: 1;
				border-radius: luiTheme(adjective, rounded, radius);
				color: map-gets($vars, header, background);
				background-color: map-gets($vars, header, text);
			}
		}
	}

	thead, tbody {
		position: absolute;
		display: table;
		width: auto;
		min-width: 100%;
		box-sizing: border-box;
		table-layout: fixed;
	}

	// Header
	// ====
	thead {
		position: absolute;
		color: map-gets($vars, header, text);
		font-weight: map-gets($vars, header, fontWeight);
		text-align: map-gets($vars, header, textAlignment);

		a {
			color: map-gets($vars, header, text);
			text-decoration: none;
		}

		th {
			background-color: map-gets($vars, header, background);
			vertical-align: bottom;
			border-color: map-gets($vars, header, borderColor);
		}
		tr:not(.filters) th:not([colspan]) {
			padding-top: map-gets($vars, header, cellPaddingTop);
		}
	}


	// Body
	// ====
	tbody {
		height: auto;
		background-color: map-gets($vars, background);
	}


	// Styles
	// ====
	&.zebra {
		tbody > tr:nth-child(2n) {
			background-color: map-gets($vars, rows, zebraColor);
		}
	}

	// Hover color
	tr.hovering {
		background-color: map-gets($vars, rows, hoverColor) !important;
	}
}
