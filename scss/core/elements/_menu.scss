// ===================================
// ============= Mixins ==============
// ===================================

// Coloring support
// ===================================

@mixin lui_menu_coloring($scheme) {
	&.dividing > a.item {
		&:before, &:after {
			background-color: map-get($scheme, color);
		}
	}
	&.pills > a.active.item {
		background-color: map-get($scheme, color);
		color: map-get($scheme, text);
	}
	&.pills > a.item:hover {
		background-color: lighten(map-get($scheme, color), 5);
		color: map-get($scheme, text);
	}
	&.tabbed > a.active.item {
		border-top-color: map-get($scheme, color);
	}
}


// ===================================
// ============= Element =============
// ===================================

@if theme(elements, menu, enabled) {
	@at-root #{$namespace} {
		$vars: theme(elements, menu);

		// Menu
		// ===================================

		// Base menu styling
		// ====
		#{$prefix}.menu {
			// position: relative;
			@include display-flex();
			@include flex-wrap(wrap);

			margin: result($vars, verticalMargin) result($vars, horizontalMargin);
			padding: result($vars, verticalPadding) result($vars, horizontalPadding);

			&:first-child { margin-top: 0; }
			&:last-child { margin-bottom: 0; }

			// resets
			@extend #{$prefix}.clear;
			ul { @extend ul#{$prefix}.unstyled; }
			a { @extend a#{$prefix}.unstyled; }
		}


		// Justified
		// ====
		#{$prefix}.justified.menu:not(.vertical) {
			@include flex-justify-content(space-between);
			> .item {
				@include flex(1);
				text-align: center;
				margin: 0;
				@include flex-justify-content(center);
			}
			&:after {
				display: none;
			}

		}

		// centered
		// ====
		#{$prefix}.centered.menu:not(.vertical) {
			@include flex-justify-content(center);
		}


		// Bordered style menu
		// ====

		// Base
		#{$prefix}.menu.bordered {
			border: result($vars, borderWidth) result($vars, borderStyle) result($vars, borderColor);
			&.inverted { border: result($vars, borderWidth) result($vars, borderStyle) result($vars, invertedBorderColor); }
		}
		// Horizontal
		#{$prefix}.menu.bordered:not(.vertical) {
			> .item:not([class*="right item"]),
			> .menu:not([class*="right menu"]) {
				border-right: result($vars, borderWidth) result($vars, borderStyle) result($vars, borderColor);
			}
			&.inverted > .item:not([class*="right item"]),
			&.inverted > .menu:not([class*="right menu"]) {
				border-right: result($vars, borderWidth) result($vars, borderStyle) result($vars, invertedBorderColor);
			}
		}
		// Vertical
		#{$prefix}.menu.vertical.bordered {
			> .item:not([class*="bottom item"]),
			> .menu:not([class*="bottom menu"]) {
				border-bottom: result($vars, borderWidth) result($vars, borderStyle) result($vars, borderColor);
			}
			&.inverted > .item:not([class*="bottom item"]),
			&.inverted > .menu:not([class*="bottom menu"]) {
				border-bottom: result($vars, borderWidth) result($vars, borderStyle) result($vars, invertedBorderColor);
			}
		}

		#{$prefix}.dividing.menu > a.item,
		#{$prefix}.tabbed.menu > a.item,
		#{$prefix}.pills.menu > a.item {
			&, &:hover, &.active, &:visited { color: result($vars, dividing, itemColor); text-decoration: none; }
		}

		// Dividing support - horizontal
		#{$prefix}.bordered.menu:not(.vertical) > #{$prefix}.dividing.menu,
		#{$prefix}.dividing.menu:not(.vertical) > #{$prefix}.dividing.menu {
			&:not([class*="top dividing"]) { border-bottom: none !important; }
			&[class*="top dividing"] { border-top: none !important; }
		}
		// Dividing support - Vertical
		#{$prefix}.bordered.vertical.menu > #{$prefix}.dividing.menu,
		#{$prefix}.dividing.vertical.menu > #{$prefix}.dividing.menu {
			&:not([class*="right dividing"]) { border-left: none !important; }
			&[class*="right dividing"] { border-right: none !important; }
		}


		// Item(s)
		// ===================================

		// Common styles
		// ====
		#{$prefix}.menu > .item {
			// Resets
			position: relative;
			line-height: 1;
			@extend #{$prefix}.clear;
		}

		// Link items
		// ====
		#{$prefix}.menu > a.item {
			cursor: pointer;
			&, &:hover, &:visited {
				color: theme(elements, typography, links, color);
			}
			&:hover, &.active {
				text-decoration: underline;
			}
		}
		#{$prefix}.menu > .item.disabled,
		#{$prefix}.menu > .item.ng-disabled {
			cursor: pointer;
			pointer-events: none;
			opacity: 0.8;
		}
		#{$prefix}.menu > .item.active {
			font-weight: 600;
		}

		// Header item
		// ====
		#{$prefix}.menu.vertical > .item.divider:not(.header) {
			padding-top: 0 !important;
			padding-bottom: 0 !important;
		}
		#{$prefix}.menu > .item.header {
			font-size: result($vars, item, header, fontSize);
		}


		// Divider item
		// ====
		#{$prefix}.menu:not(.vertical) > .item.divider {
			width: auto;
		}
		#{$prefix}.menu:not(.vertical) > .item.divider:not(.header) {
			border: none; padding-right: 0; margin-right: result($vars, item, horizontal, horizontalPadding) + result($vars, item, horizontal, horizontalMargin);
			border-right: 1px solid result($vars, borderColor);
			&.dashed { border-right-style: dashed; }
			&.dotted { border-right-style: dotted; }
		}


		// Label support
		// ====
		#{$prefix}.menu > .item > .label {
			float: right;
			margin-right: 0;
			margin-top: -0.15em;
		}

		// Button & input support
		#{$prefix}.item .button,
		#{$prefix}.item.button,

		#{$prefix}.item .buttons,
		#{$prefix}.item.buttons,

		#{$prefix}.item .input,
		#{$prefix}.item.input {
			@include flex-align-self(center);
		}


		// Item positioning
		// ====
		// Horizontal menus - right item
		#{$prefix}.menu:not(.vertical) > #{$prefix}.item:not([class*="right item"]),
		#{$prefix}.menu:not(.vertical) > #{$prefix}.menu:not([class*="right menu"]) {
			float: left; // old browsers...
			@include display-flex();
			@include flex-wrap(wrap);
		}
		#{$prefix}.menu:not(.vertical) > #{$prefix}.item[class*="right item"],
		#{$prefix}.menu:not(.vertical) > #{$prefix}.item[class*="right items"],
		#{$prefix}.menu:not(.vertical) > #{$prefix}.menu[class*="right menu"] {
			float: right; // old browsers...
			@include display-flex();
			@include flex-wrap(wrap);
			@include flex-justify-content(flex-end);
			margin-left: auto !important;
			margin-right: 0 !important;
		}
		// Vertical menus - bottom item
		#{$prefix}.vertical.menu > #{$prefix}.item[class*="bottom item"],
		#{$prefix}.vertical.menu > #{$prefix}.item[class*="bottom items"],
		#{$prefix}.vertical.menu > #{$prefix}.menu[class*="bottom menu"] {
			margin-top: auto !important;
		}
		// Vertical menus - centered item
		#{$prefix}.vertical.menu > .centered.item,
		#{$prefix}.vertical.menu > .centered.menu {
			margin-top: auto !important; margin-left: auto !important;
		}
		// Horizontal menus - centered item
		#{$prefix}:not(.vertical).menu > .centered.item,
		#{$prefix}:not(.vertical).menu > .centered.menu {
			margin-left: auto !important; margin-right: auto !important;
			text-align: center;
		}


		// Menu direction - Horizontal & Vertical
		// ====
		// Horizontal menu item
		#{$prefix}.menu:not(.vertical) > .item,
		#{$prefix}.menu:not(.vertical) > .menu {
			// Old browsers
			float: left;
			@include display-flex();
			@include flex-align-items(center);
			padding: result($vars, item, horizontal, verticalPadding) result($vars, item, horizontal, horizontalPadding);
			margin: result($vars, item, horizontal, verticalMargin) result($vars, item, horizontal, horizontalMargin);
		}
		// Vertical menu item
		#{$prefix}.menu.vertical > .item {
			display: block;
			padding: result($vars, item, vertical, verticalPadding) result($vars, item, vertical, horizontalPadding);
			margin: result($vars, item, vertical, verticalMargin) result($vars, item, vertical, horizontalMargin);
		}
		// Vertical
		#{$prefix}.menu.vertical > .menu:not(.horizontal),
		#{$prefix}.menu.vertical > .item {
			@include flex-direction(column);
		}



		// Menu orientation
		// ===================================

		// Horizontal (default)
		#{$prefix}.menu:not(.vertical) {
			@include flex-direction(row);
		}
		#{$prefix}.menu.v-aligned,
		#{$prefix}.menu[class*="vertically aligned"] {
			@include flex-align-items(center);
		}

		// Vertical
		#{$prefix}.menu.vertical {
			@include flex-direction(column);
			> .menu > .item {
				border-right: none;
			}
		}

		// Coloring
		#{$prefix}.menu {
			// Default coloring scheme
			@include lui_menu_coloring(result($vars, defaultColoring));
			// Coloring support
			@each $name, $scheme in luiPalettes() {
				&.#{map-get($scheme, class)} {
					@include lui_menu_coloring($scheme);
				}
			}
		}

		// Menu styles
		// ===================================

		// Dividing style
		#{$prefix}.menu > .dividing.menu {
			padding: 0; @include flex-align-self(stretch);
		}
		// Dividing - Common
		#{$prefix}.menu.dividing {
			border-color: result($vars, dividing, dividerColor);
			@include flex-align-content(stretch);
			> .item {
				@include flex-align-self(stretch);
				padding: result($vars, item, horizontal, verticalPadding) 0;
				margin: result($vars, item, horizontal, verticalMargin) (result($vars, item, horizontal, horizontalMargin) + result($vars, item, horizontal, horizontalPadding));
			}

			> a.item:not(.active):not(:hover) { opacity: 0.75; }

			> a.item:before, > a.item:after {
				visibility: visible;
				position: absolute;
				display: block; content: "";
				@include lui_transition_properties(width, height);
			}

			&.bordered > .item {
				padding: result($vars, item, horizontal, verticalPadding) (result($vars, item, horizontal, horizontalMargin) + result($vars, item, horizontal, horizontalPadding));
				margin: 0;
			}
		}
		// Dividing - Horizontal
		#{$prefix}.menu.dividing:not(.vertical) {
			> a.item:after,
			> a.item:before {
				left: 0; right: 0;
				margin: 0 auto;
				width: 0; height: result($vars, dividing, activeDividerWidth);
			}

			// Dividing is down
			&:not([class*="top dividing"]) {
				border-bottom-width: result($vars, dividing, dividerWidth);
				border-bottom-style: solid;
				> a.item:after {
					bottom: -(result($vars, item, horizontal, verticalMargin) + result($vars, verticalPadding));
				}
				> a.item:not(.disabled):hover:after, > a.item:active:after, > a.item.active:after { width: 100%; }
			}

			// Dividing is up
			&[class*="top dividing"] {
				border-top-width: result($vars, dividing, dividerWidth);
				border-top-style: solid;
				> a.item:before {
					top: -(result($vars, item, horizontal, verticalMargin) + result($vars, verticalPadding));
				}
				> a.item:not(.disabled):hover:before, > a.item:active:before, > a.item.active:before { width: 100%; }
			}
		}

		// Dividing - Vertical
		#{$prefix}.menu.dividing.vertical {
			> .item {
				margin: result($vars, item, vertical, verticalMargin) result($vars, item, vertical, horizontalMargin);
				padding: result($vars, item, vertical, verticalPadding) result($vars, item, vertical, horizontalPadding);
			}
			> a.item:after,
			> a.item:before {
				top: 50%; bottom: 0;
				-ms-transform: translate(0, -50%);
				transform: translate(0, -50%);
				width: result($vars, dividing, activeDividerWidth); height: 0;
			}

			// Divider is left
			&:not([class*="right dividing"]),
			&[class*="left dividing"] {
				border-left-width: result($vars, dividing, dividerWidth);
				border-left-style: solid;
				> a.item:before {
					margin-left: -(result($vars, dividing, dividerWidth));
					left: -(result($vars, item, vertical, horizontalMargin) + result($vars, horizontalPadding));
				}
				> a.item:not(.disabled):hover:before, > a.item:active:before, > a.item.active:before { height: 100%; }
			}

			// Divider is right
			&[class*="right dividing"] {
				border-right-width: result($vars, dividing, dividerWidth);
				border-right-style: solid;
				> a.item:after {
					margin-right: -(result($vars, dividing, dividerWidth));
					right: -(result($vars, item, vertical, horizontalMargin) + result($vars, horizontalPadding));
				}
				> a.item:not(.disabled):hover:after, > a.item:active:after, > a.item.active:after { height: 100%; }
			}
		}

		#{$prefix}.menu.vertical[class*="right dividing"] .menu[class*="right dividing"] { border-right: none !important; }
		#{$prefix}.menu.vertical:not([class*="right dividing"]) .menu:not([class*="right dividing"]) { border-left: none !important; }


		// Tabbed style
		// ====
		#{$prefix}.menu.tabbed {
			position: relative;
			background: result($vars, tabbed, background);
			padding: result($vars, tabbed, padding);
			border: 1px solid result($vars, tabbed, borderColor);
			border-bottom: none;
			margin-top: 2*#{result($vars, item, horizontal, verticalPadding)};

			&.bordered > .item, > .item {
				position: relative; z-index: 2;
				border: 1px solid transparent;
				margin-top: 0;
				bottom: -1px;
			}

			> a.item.active, > a.item:hover {
				background: result($vars, tabbed, activeBackground);
				padding-top: 2*#{result($vars, item, horizontal, verticalPadding); margin-top: -(result($vars, item, horizontal, verticalPadding))};

				border-top-color: result($vars, tabbed, borderColor);
				border-left-color: result($vars, tabbed, borderColor);
				border-right-color: result($vars, tabbed, borderColor);
			}

			> a.item.active {
				border-top-width: result($vars, tabbed, activeBorderWidth);
			}

			&:after {
				visibility: visible;
				position: absolute; top: 100%; left: -1px; right: -1px;
				display: block; content: "";
				height: result($vars, tabbed, bottomSpacing);
				border: 1px solid result($vars, tabbed, borderColor);
			}
			margin-bottom: result($vars, tabbed, bottomSpacing);
		}

		// Pills style
		// ====
		#{$prefix}.menu.pills {
			> .item {
				border-right: none !important;
			}

			> a.item {
				border-radius: result($vars, pills, borderRadius);
				margin: 0;
				@include lui_transition_properties(background);
			}

			&[class*="squared pills"] > a.item { border-radius: 0; }
		}
		#{$prefix}.menu.pills:not(.vertical) > a.item {
			padding: (result($vars, item, horizontal, verticalPadding) + result($vars, item, horizontal, verticalMargin)) (result($vars, item, horizontal, horizontalPadding) + result($vars, item, horizontal, horizontalMargin));
		}
		#{$prefix}.menu.pills.vertical > a.item {
			padding: (result($vars, item, vertical, verticalPadding) + result($vars, item, vertical, verticalMargin)) (result($vars, item, vertical, horizontalPadding) + result($vars, item, vertical, horizontalMargin));
		}


		// Fitting menu
		// ====
		#{$prefix}.fitting.menu > .item:first-child,
		#{$prefix}.fitting.menu > .menu:first-child {
			padding-left: 0;
		}
		#{$prefix}.fitting.menu > .item:last-child,
		#{$prefix}.fitting.menu > .menu:last-child {
			padding-right: 0;
		}

		// Menu inception
		// ====
		#{$prefix}.menu > .menu {
			border-width: 0;
			margin: 0; padding: 0;
		}
		#{$prefix}.menu:not(.vertical) > .menu {
			@include display-flex();
		}

		// Container menu
		// ===================================

		@each $name, $props in theme(references, breakpoints) {
			@media (min-width: map-get($props, break)) {
				#{$prefix}.menu.container {
					padding-left: map-get($props, spacing);
					padding-right: map-get($props, spacing);
				}
			}
		}
		#{$prefix}.menu.container {
			> .item:first-child {
				padding-left: 0;
				margin-left: 0;
			}
			> .item:last-child {
				padding-right: 0;
				margin-right: 0;
			}
		}
	}
}
