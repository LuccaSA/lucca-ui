// ===================================
// ============= Mixins ==============
// ===================================

// Coloring support
// ===================================

@mixin lui_menu_coloring($scheme) {
	&.dividing > a.item {
		&:before, &:after {
			background-color: map-get($scheme, color);
		}
	}
	&.pills > a.item:active, &.pills > a.item.active {
		background-color: map-get($scheme, color);
		color: map-get($scheme, text);
	}
	&.pills > a.item:hover {
		background-color: lighten(map-get($scheme, color), 5);
		color: map-get($scheme, text);
	}
	&.tabbed > a.item.active {
		border-top-color: map-get($scheme, color);
	}
}
#{$prefix}.menu {
	// Default coloring scheme
	@include lui_menu_coloring(map-gets($vars, defaultColoring));
	// Coloring support
	@each $name, $scheme in map-gets($luiTheme, references, colors) {
		&.#{map-get($scheme, class)} {
			@include lui_menu_coloring($scheme);
		}
	}
}


// ===================================
// ============= Element =============
// ===================================

@if map-get($vars, enabled) {

	#{$prefix}.menu {
		position: relative;
		@include display-flex();
		@include flex-wrap(wrap);

		margin: map-gets($vars, verticalMargin) map-gets($vars, horizontalMargin);
		padding: map-gets($vars, verticalPadding) map-gets($vars, horizontalPadding);

		&:first-child { margin-top: 0; }
		&:last-child { margin-bottom: 0; }

		// resets
		@extend #{$prefix}.clear;
		ul { @extend ul#{$prefix}.unstyled; }
		a { @extend a#{$prefix}.unstyled; }
	}

	// Borders
	#{$prefix}.menu.bordered {
		border: map-gets($vars, borderWidth) map-gets($vars, borderStyle) map-gets($vars, borderColor);
		&.inverted {
			border: map-gets($vars, borderWidth) map-gets($vars, borderStyle) map-gets($vars, invertedBorderColor);
		}
	}
	#{$prefix}.menu.bordered:not(.vertical) {
		> .item, > .menu {
			border-right: map-gets($vars, borderWidth) map-gets($vars, borderStyle) map-gets($vars, borderColor);
			@include flex-align-self(stretch);
		}
		&.inverted > .item, &.inverted > .menu {
			border-right: map-gets($vars, borderWidth) map-gets($vars, borderStyle) map-gets($vars, invertedBorderColor);
		}
		> .item:last-child {
			border-right: none;
		}

		> .menu[class*="top dividing"] { margin-top: -1px; }
		> .menu:not([class*="top dividing"]) { margin-bottom: -1px; }
	}
	#{$prefix}.menu.vertical.bordered {
		> .item, > .menu {
			border-bottom: map-gets($vars, borderWidth) map-gets($vars, borderStyle) map-gets($vars, borderColor);
		}
		&.inverted > .item, &.inverted > .menu {
			border-bottom: map-gets($vars, borderWidth) map-gets($vars, borderStyle) map-gets($vars, invertedBorderColor);
		}
		> .item:last-child {
			border-bottom: none;
		}

		> .menu[class*="right dividing"] { margin-right: -1px; }
		> .menu:not([class*="right dividing"]) { margin-left: -1px; }
	}

	// Sub menu
	#{$prefix}.menu:not(.dividing) > .menu:not(.dividing) {
		border-width: 0;
		margin: 0;
		padding: map-gets($vars, item, horizontal, verticalPadding) map-gets($vars, item, horizontal, horizontalPadding);
		margin: map-gets($vars, item, horizontal, verticalMargin) map-gets($vars, item, horizontal, horizontalMargin);
	}
	#{$prefix}.menu:not(.vertical) > .menu {
		@include display-flex();
	}


	// Items - groups (horizontal menus only)
	// ===================================

	// Common
	#{$prefix}.menu > .item {
		// Resets
		position: relative;
		line-height: 1;
		@extend #{$prefix}.clear;

		// Label support
		> .label {
			float: right;
			margin-right: 0;
			margin-top: -0.15em;
		}
	}
	// Old browsers
	#{$prefix}.menu:not(.vertical) > #{$prefix}.item:not([class*="right item"]),
	#{$prefix}.menu:not(.vertical) > #{$prefix}.menu:not([class*="right menu"]) { float: left; }
	#{$prefix}.menu:not(.vertical) > #{$prefix}.item[class*="right item"],
	#{$prefix}.menu:not(.vertical) > #{$prefix}.menu[class*="right menu"] { float: right; }

	#{$prefix}.menu > a.item {
		cursor: pointer;
		&, &:hover, &:visited { color: map-gets($vars, item, color); text-decoration: none;}
	}
	#{$prefix}.menu > .item.disabled,
	#{$prefix}.menu > .item.ng-disabled { cursor: pointer; pointer-events: none; opacity: 0.8; }

	// Active item
	#{$prefix}.menu > .item.active {
		font-weight: 600;
	}

	// Divider item
	#{$prefix}.menu:not(.vertical) > .item.divider:not(.header) {
		border: none; padding-right: 0; margin-right: map-gets($vars, item, horizontal, horizontalPadding) + map-gets($vars, item, horizontal, horizontalMargin);
		border-right: 1px solid map-gets($vars, borderColor);
	}
	#{$prefix}.menu.vertical > .item.divider:not(.header) {
		padding-top: 0 !important;
		padding-bottom: 0 !important;
	}

	// Header item
	#{$prefix}.menu > .item.header {
		font-size: map-gets($vars, item, header, fontSize);
	}

	// Horizontal menu item
	#{$prefix}.menu:not(.vertical) > .item {
		// Old browsers
		float: left;

		@include display-flex();
		@include flex-align-items(center);

		padding: map-gets($vars, item, horizontal, verticalPadding) map-gets($vars, item, horizontal, horizontalPadding);
		margin: map-gets($vars, item, horizontal, verticalMargin) map-gets($vars, item, horizontal, horizontalMargin);
	}

	// Vertical menu item
	#{$prefix}.menu.vertical > .item {
		display: block;

		 padding: map-gets($vars, item, vertical, verticalPadding) map-gets($vars, item, vertical, horizontalPadding);
		 margin: map-gets($vars, item, vertical, verticalMargin) map-gets($vars, item, vertical, horizontalMargin);
	}

	// Centered item
	#{$prefix}.menu > .centered.item,
	#{$prefix}.menu > .centered.menu {
		margin-left: auto !important; margin-right: auto !important;
		text-align: center;
	}


	// Element support
	#{$prefix}.item .button,
	#{$prefix}.item.button,
	#{$prefix}.item .buttons,
	#{$prefix}.item.buttons,
	#{$prefix}.item .input,
	#{$prefix}.item.input {
		@include flex-align-self(center);
	}


	// Items - groups (horizontal menus only)
	// ===================================

	// Horizontal left floated
	#{$prefix}.menu:not(.vertical) > [class*="left item"],
	#{$prefix}.menu:not(.vertical) > [class*="left menu"] {
		float: left; // old browsers...
		@include display-flex();
		@include flex-wrap(wrap);
		margin-right: auto;
	}
	// Horizontal right floated
	#{$prefix}.menu:not(.vertical) > [class*="right item"],
	#{$prefix}.menu:not(.vertical) > [class*="right menu"] {
		float: right; // old browsers...
		@include display-flex();
		@include flex-wrap(wrap);
		@include flex-justify-content(flex-end);
		margin-left: auto !important;
	}
	// vertical
	#{$prefix}.menu.vertical > .menu:not(.horizontal),
	#{$prefix}.menu.vertical > .item {
		@include flex-direction(column);
	}
	// Vertical bottom "floated"
	#{$prefix}.menu.vertical > .bottom.item,
	#{$prefix}.menu.vertical > .bottom.menu {
		margin-top: auto !important;
	}
	// Borders
	#{$prefix}.menu.bordered,
	#{$prefix}.menu.bordered {
		&.inverted:not(.vertical) {
			> [class*="left item"], > [class*="left menu"] {
				border-right: map-gets($vars, borderWidth) solid map-gets($vars, invertedBorderColor);
			}
			> [class*="right item"], > [class*="right menu"] {
				border-left: map-gets($vars, borderWidth) solid map-gets($vars, invertedBorderColor);
			}
		}
		&:not(.inverted):not(.vertical) {
			> [class*="left item"], > [class*="left menu"] {
				border-right: map-gets($vars, borderWidth) solid map-gets($vars, borderColor);
			}
			> [class*="right item"], > [class*="right menu"] {
				border-left: map-gets($vars, borderWidth) solid map-gets($vars, borderColor);
			}
		}
	}
	#{$prefix}.menu.vertical > [class*="left item"] + [class*="right item"] {
		border-top: none;
	}


	// Menu orientation
	// ===================================

	// Horizontal (default)
	#{$prefix}.menu:not(.vertical) {
		@include flex-direction(row);
	}
	#{$prefix}.menu.v-aligned,
	#{$prefix}.menu[class*="vertically aligned"] {
		@include flex-align-items(center);
	}

	// Vertical
	#{$prefix}.menu.vertical {
		@include flex-direction(column);

		> .menu > .item {
			border-right: none;
		}
	}


	// Menu styles
	// ===================================

	 // Dividing - Common
	#{$prefix}.menu.dividing {
		border-color: map-gets($vars, dividing, dividerColor);

		> .item {
			padding: map-gets($vars, item, horizontal, verticalPadding) 0;
			margin: map-gets($vars, item, horizontal, verticalMargin) (map-gets($vars, item, horizontal, horizontalMargin) + map-gets($vars, item, horizontal, horizontalPadding));
		}

		> [class*="right item"], > [class*="right menu"] {
			border-left: none !important;
		}
		> [class*="left item"], > [class*="left menu"] {
			border-right: none !important;
		}

		> a.item:before, > a.item:after {
			visibility: visible;
			position: absolute;
			display: block; content: "";
			@include lui_transition_properties(width, height);
		}

		&.bordered > .item {
			padding: map-gets($vars, item, horizontal, verticalPadding) (map-gets($vars, item, horizontal, horizontalMargin) + map-gets($vars, item, horizontal, horizontalPadding));
			margin: 0;
		}
	}
	// Dividing - Horizontal
	#{$prefix}.menu.dividing:not(.vertical) {
		> a.item:after,
		> a.item:before {
			left: 0; right: 0;
			margin: 0 auto;
			width: 0; height: map-gets($vars, dividing, activeDividerWidth);
		}

		// Dividing is down
		&:not([class*="top dividing"]) {
			border-bottom-width: map-gets($vars, dividing, dividerWidth);
			border-bottom-style: solid;
			> a.item:after {
				bottom: -(map-gets($vars, item, horizontal, verticalMargin) + map-gets($vars, verticalPadding));
			}
			> a.item:not(.disabled):hover:after, > a.item:active:after, > a.item.active:after { width: 100%; }
		}

		// Dividing is up
		&[class*="top dividing"] {
			border-top-width: map-gets($vars, dividing, dividerWidth);
			border-top-style: solid;
			> a.item:before {
				top: -(map-gets($vars, item, horizontal, verticalMargin) + map-gets($vars, verticalPadding));
			}
			> a.item:not(.disabled):hover:before, > a.item:active:before, > a.item.active:before { width: 100%; }
		}
	}

	// Dividing - Vertical
	#{$prefix}.menu.dividing.vertical {
		> .item {
			margin: map-gets($vars, item, vertical, verticalMargin) map-gets($vars, item, vertical, horizontalMargin);
			padding: map-gets($vars, item, vertical, verticalPadding) map-gets($vars, item, vertical, horizontalPadding);
		}
		> a.item:after,
		> a.item:before {
			top: 50%; bottom: 0;
			-ms-transform: translate(0, -50%);
			transform: translate(0, -50%);
			width: map-gets($vars, dividing, activeDividerWidth); height: 0;
		}

		// Divider is left
		&:not([class*="right dividing"]),
		&[class*="left dividing"] {
			border-left-width: map-gets($vars, dividing, dividerWidth);
			border-left-style: solid;
			> a.item:before {
				margin-left: -(map-gets($vars, dividing, dividerWidth));
				left: -(map-gets($vars, item, vertical, horizontalMargin) + map-gets($vars, horizontalPadding));
			}
			> a.item:not(.disabled):hover:before, > a.item:active:before, > a.item.active:before { height: 100%; }
		}

		// Divider is right
		&[class*="right dividing"] {
			border-right-width: map-gets($vars, dividing, dividerWidth);
			border-right-style: solid;
			> a.item:after {
				margin-right: -(map-gets($vars, dividing, dividerWidth));
				right: -(map-gets($vars, item, vertical, horizontalMargin) + map-gets($vars, horizontalPadding));
			}
			> a.item:not(.disabled):hover:after, > a.item:active:after, > a.item.active:after { height: 100%; }
		}
	}

	// Dividing menus inception
	#{$prefix}[class*="top dividing"].menu:not(.vertical) > #{$prefix}[class*="top dividing"].menu:not(.vertical) { border-top: none; }
	#{$prefix}.dividing.menu:not([class*="top dividing"]):not(.vertical) > #{$prefix}.dividing.menu:not([class*="top dividing"]):not(.vertical) { border-bottom: none; }
	.lui:not([class*="right dividing"]).menu.vertical > .lui:not([class*="left dividing"]).menu.vertical { border-left: none; }
	#{$prefix}[class*="right dividing"].menu.vertical > #{$prefix}[class*="right dividing"].menu.vertical { border-right: none; }



	// Tabbed
	#{$prefix}.menu.tabbed {
		background: map-gets($vars, tabbed, background);
		padding: map-gets($vars, tabbed, padding);
		border: 1px solid map-gets($vars, tabbed, borderColor);
		border-bottom: none;
		margin-top: 2*map-gets($vars, item, horizontal, verticalPadding);

		&.bordered > .item, > .item {
			position: relative; z-index: 2;
			border: 1px solid transparent;
			margin-top: 0;
			bottom: -1px;
		}

		> a.item.active, > a.item:hover {
			background: map-gets($vars, tabbed, activeBackground);
			padding-top: 2*map-gets($vars, item, horizontal, verticalPadding); margin-top: -(map-gets($vars, item, horizontal, verticalPadding));

			border-top-color: map-gets($vars, tabbed, borderColor);
			border-left-color: map-gets($vars, tabbed, borderColor);
			border-right-color: map-gets($vars, tabbed, borderColor);
		}

		> a.item.active {
			border-top-width: map-gets($vars, tabbed, activeBorderWidth);
		}

		&:after {
			visibility: visible;
			position: absolute; top: 100%; left: -1px; right: -1px;
			display: block; content: "";
			height: map-gets($vars, tabbed, bottomSpacing);
			border: 1px solid map-gets($vars, tabbed, borderColor);
		}
		margin-bottom: map-gets($vars, tabbed, bottomSpacing);
	}

	// Pills
	#{$prefix}.menu.pills {
		> .item {
			border-right: none !important;
		}

		> a.item {
			border-radius: map-gets($vars, pills, borderRadius);
			margin: 0;
			@include lui_transition_properties(background);
		}

		&[class*="squared pills"] > a.item { border-radius: 0; }
	}
	#{$prefix}.menu.pills:not(.vertical) > a.item {
		padding: (map-gets($vars, item, horizontal, verticalPadding) + map-gets($vars, item, horizontal, verticalMargin)) (map-gets($vars, item, horizontal, horizontalPadding) + map-gets($vars, item, horizontal, horizontalMargin));
	}
	#{$prefix}.menu.pills.vertical > a.item {
		padding: (map-gets($vars, item, vertical, verticalPadding) + map-gets($vars, item, vertical, verticalMargin)) (map-gets($vars, item, vertical, horizontalPadding) + map-gets($vars, item, vertical, horizontalMargin));
	}

	// Alignments
	#{$prefix}.menu.justified:not(.vertical) {
		@include flex-justify-content(space-between);
		> .item {
			@include flex(1);
			text-align: center;
			margin: 0;
			@include flex-justify-content(center);
		}
		&:after {
			display: none;
		}
	}


	// Container menu
	// ===================================

	@each $name, $props in lui_theme(reference, breakpoints) {
		$breakAt: nth($props, 1);
		$spacing: nth($props, 2);

			@media (min-width: $breakAt) {
				#{$prefix}.menu.container {
					padding-left: $spacing;
					padding-right: $spacing;
				}
			}
	}

	#{$prefix}.menu.container {
		> .item:first-child {
			padding-left: 0;
			margin-left: 0;
		}
		> .item:last-child {
			padding-right: 0;
			margin-right: 0;
		}
	}
}
