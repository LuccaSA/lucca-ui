// ===================================
// ============= Mixins ==============
// ===================================

// General
// ===================================

@mixin lui_body_typeset {
	font-size: theme(elements, typography, body, fontSize);
	font-family: unquote(theme(elements, typography, body, fontFamily));
	color: theme(elements, typography, body, color);
	line-height: theme(elements, typography, body, lineHeight);

	-webkit-font-smoothing: antialiased;
	-moz-osx-font-smoothing: grayscale;
}


// ===================================
// ============= Element =============
// ===================================

@if theme(elements, typography, enabled) {
	@at-root #{$namespace} {
		$vars: theme(elements, typography);

		// Common and shortcuts
		// ===================================
		@include lui_body_typeset;

		#{$prefix}.small, small { font-size: #{map-get($vars, smallSize)}; }

		#{$prefix}.italic { font-style: italic; }

		#{$prefix}.bold,
		b, strong { font-weight: result($vars, body, boldWeight); }



		// Headings
		// ===================================

		h1, h2, h3, h4, h5, h6 {
			font-family: unquote(result($vars, headings, fontFamily));
			margin: 0;
			padding: 0em;

			// Icon in headings support
			> #{$prefix}.icon:not(.button) {
				margin-right: .5em;
				vertical-align: top;
				font-size: result($vars, headings, iconSize);

				&.right {
					margin-left: .5em;
					margin-right: 0;
				}
			}
		}

		@each $heading in (h1, h2, h3, h4, h5, h6) {
			#{$heading} {
				font-size: result($vars, headings, $heading, fontSize);
				line-height: result($vars, headings, $heading, lineHeight);
				font-weight: result($vars, headings, $heading, fontWeight);
			}
		}


		// Sub heading
		// ===================================
		h1, h2, h3, h4, h5, h6 {
			#{$prefix}.sub {
				letter-spacing: normal;
				display: block;
				font-weight: result($vars, headings, sub, fontWeight);
				font-size: result($vars, headings, sub, fontSize);
				color: result($vars, headings, sub, color);
				margin: 0;
			}
			#{$prefix}.sub.inline {
				display: inline-block;
				vertical-align: baseline;
				margin-left: 1em;
			}
		}


		// Horizontal ruler
		// ===================================

		#{$prefix}.typeset hr {
			clear: both;
			@extend %lui_divider_base;
		}


		// Definition lists
		// ===================================

		dl#{$prefix}.definition-list,
		#{$prefix}.typeset dl {
			@extend #{$prefix}.clear;
			dt {
				width: result($vars, definitionList, termWidth);
				font-weight: result($vars, definitionList, termWeight);
				margin-bottom: result($vars, definitionList, itemVerticalSpacing);
				&:after {
					content: result($vars, definitionList, divider);;
				}
			}

			dd {
				width: calc(100% - #{result($vars, definitionList, termWidth)} - #{result($vars, definitionList, gutter)});
				font-weight: result($vars, definitionList, definitionWeight);
				margin: 0 0 result($vars, definitionList, itemVerticalSpacing) result($vars, definitionList, gutter);;
			}
			dd, dt { float: left; &:last-of-type { margin-bottom: 0; } }
		}


		// Text alignment
		// ===================================

		#{$prefix}[class*="center aligned"] { text-align: center; }
		#{$prefix}[class*="left aligned"] { text-align: left; }
		#{$prefix}[class*="right aligned"] { text-align: right; }
		#{$prefix}[class*="justify aligned"] { text-align: justify; }


		// Links
		// ===================================

		#{$prefix}.link,
		a {
			cursor: pointer;
			color: result($vars, links, color);
			text-decoration: result($vars, links, decoration);
			&:hover, &:active {
				color: result($vars, links, hover, color);
				text-decoration: result($vars, links, hover, decoration);
			}
			&:visited {
				color: result($vars, links, visited, color);
			}
		}
		#{$prefix}.fancy.link {
			&, &:hover, &:active, &:visited { text-decoration: none; }

			display: inline-block;
			vertical-align: baseline;
			position: relative;
			&:after {
				display: block;
				content: "";
				position: absolute;
				width: 0%;
				top: 100%;
				left: 0; right: 0;
				margin: 0 auto;
				border-bottom: 1px solid result($vars, links, hover, color);

				@include lui_transition(width);
			}

			&:visited:after { border-color: result($vars, links, visited, color); }

			&:hover:after {
				width: 100%;
			}
		}


		// Capitalization
		// ===================================

		#{$prefix}[class*="capitalized sentence"]::first-letter { text-transform: capitalize; }
		#{$prefix}.capitalized:not([class*="capitalized sentence"]) { text-transform: capitalize; }
		#{$prefix}.uppercase { text-transform: uppercase; }



		#{$prefix}.typeset {
			h1, h2, h3, h4, h5, h6 { margin: 1em 0 0.5em 0; }
			h1:first-child {
				margin-top: 0;
			}
		}


		// Blockquotes
		// ===================================

		#{$prefix}.quote,
		#{$prefix}.typeset blockquote {
			font-size: result($vars, quote, fontSize);
			font-style: result($vars, quote, fontStyle);
			border-left-width: result($vars, quote, border, width);
			border-left-style: result($vars, quote, border, style);
			border-left-color: result($vars, quote, border, color);
			margin: result($vars, quote, margin, top) result($vars, quote, margin, right) result($vars, quote, margin, bottom) result($vars, quote, margin, left);
			padding: result($vars, quote, padding, top) result($vars, quote, padding, right) result($vars, quote, padding, bottom) result($vars, quote, padding, left);

			cite {
				display: block;
				font-size: result($vars, quote, cite, fontSize);
				font-style: result($vars, quote, cite, fontStyle);
				font-weight: result($vars, quote, cite, fontWeight);
				&:before {
					display: inline-block;
					content: "\2014 \0020";
					margin-right: 0.25em;
				}
			}
		}


		// Keyboard key
		// ===================================

		#{$prefix}.keyboard.key,
		#{$prefix}.typeset kbd {
			display: inline-block;
			font-family: result($vars, kbd, fontFamily);
			font-size: result($vars, kbd, fontSize);
			color: result($vars, kbd, color);
			background: result($vars, kbd, background);
			border-radius: result($vars, kbd, borderRadius);
			border: result($vars, kbd, border, width) result($vars, kbd, border, style) result($vars, kbd, border, color);
			padding: result($vars, kbd, padding, top) result($vars, kbd, padding, right) result($vars, kbd, padding, bottom) result($vars, kbd, padding, left);
			box-shadow: 0 result($vars, kbd, extrude) 0 result($vars, kbd, extrude) darken(result($vars, kbd, border, color), 10);
			margin-left: result($vars, kbd, extrude);
			margin-right: result($vars, kbd, extrude);
		}


		// Lists
		// ===================================

		#{$prefix}.list,
		#{$prefix}.typeset ul,
		#{$prefix}.typeset ol {
			list-style: none;
		}
	}
}
