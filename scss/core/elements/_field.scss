@if luiTheme(element, overlay, enabled) {
	@at-root #{$namespace} {

		$vars: (
			invalid-color: 				luiPalette(red, color),
			valid-icon-size:			0.75em,
			vertical-margin: 			2em,

			input: (
				vertical-padding: 		0.5em,
				font-size:				1.25em,
			),

			transition: (
				duration:				100ms,
				easing:					ease-out
			),

			label: (
				color: 					luiPalette(light, color, dark),
				displaced-font-size:	0.9em,
			),

			message: (
				font-size: 				0.85em,
				helper-color: 			luiPalette(light, color, dark)
			),

			fieldset: (
				legend: (
					font-size:			1em,
					font-weight:		500
				)
			),

			field: (
				default-border-width: 	1px,
				default-border-style: 	solid,
				default-border-color:	luiPalette(light, color),

				focus-border-width:		2px,
				focus-border-style:		solid,
				focus-border-color: 	luiPalette(primary, color)
			),

			lengths: (
				x-short: 				lui_rem(5),
				short: 					lui_rem(8),
				medium:					lui_rem(15),
				long: 					lui_rem(20),
				x-long: 				lui_rem(25)
			)
		);

		// Forms are a whole group of inputs.
		// Best practice: You should have only one (displayed) form per page.
		// ====
		#{$prefix}.form {

		}

		// Fieldsets are a group of fields
		// ====
		#{$prefix}.form .fieldset,
		#{$prefix}.form fieldset,
		#{$prefix}.fieldset {

			// A fieldset can have a legend
			> legend,
			.legend {
				display: block;
				font-size: map-gets($vars, fieldset, legend, font-size);
				font-weight: map-gets($vars, fieldset, legend, font-weight);
			}
		}


		// Fields are a label coupled with an input and a potential validation message
		// ====
		%input_sizing {
			box-sizing: border-box;
			display: inline-block;
			vertical-align: baseline;

			margin: 0;
			margin-top: map-gets($vars, input, vertical-padding);

			padding: 0;
			padding-bottom: map-gets($vars, input, vertical-padding);

			height: 1 + 2 * map-gets($vars, input, vertical-padding);

			font-size: map-gets($vars, input, font-size);
		}

		#{$prefix}.form .field,
		#{$prefix}.field,
		#{$prefix}.fieldset .field {

			margin: map-gets($vars, vertical-margin) 0;

			& > .field {
				margin: 0;
			}

			position: relative;
			font-size: map-gets($vars, font-size);

			.input {

				// Input styling reset
				> input:-webkit-autofill {
					-webkit-box-shadow: 0 0 0 1000px white inset !important;
				}
				> input,
				> textarea,
				> select,
				.unit {
					@extend %input_sizing;
				}
				> input,
				> textarea {
					outline: 0;
					background: transparent;

					// Border
					border: none;
					border-bottom-width: map-gets($vars, field, default-border-width);
					border-bottom-style: map-gets($vars, field, default-border-style);
					border-bottom-color: map-gets($vars, field, default-border-color);

					// Transitions
					transition-property: border-bottom-color;
					transition-duration: map-gets($vars, transition, duration);
					transition-timing-function: map-gets($vars, transition, easing);

					&:focus {
						padding-top: map-gets($vars, field, focus-border-width) - map-gets($vars, field, default-border-width);

						// Focused state
						border-bottom-width: map-gets($vars, field, focus-border-width);
						border-bottom-style: map-gets($vars, field, focus-border-style);
						border-bottom-color: map-gets($vars, field, focus-border-color);

						& > ~ label {
							color: map-gets($vars, field, focus-border-color);
						}
					}
				}

				// Textarea specifics
				// ====
				textarea {
					resize: vertical;
				}

				// label
				// ====
				> label {
					position: absolute;
					pointer-events: none;
					top: map-gets($vars, input, vertical-padding);
					left: 0;

					font-size: map-gets($vars, input, font-size);
					color: map-gets($vars, label, color);

					transition-property: top, font-size, color;
					transition-duration: map-gets($vars, transition, duration);
					transition-timing-function: map-gets($vars, transition, easing);

				}

				// Unit
				// ====
				.unit {
					font-weight: 600;
					margin-left: 0.5em;
					line-height: 1 + map-gets($vars, input, vertical-padding);
					font-size: lui_rem(1);
				}
			}


			// Label displacement when focused or filled
			// ====
			&.filled > .input > label,
			> .input > *:valid ~ label,
			> .input > *:focus ~ label {
				top: -(2 - map-gets($vars, label, displaced-font-size));
				font-size: map-gets($vars, label, displaced-font-size);
			}



			// Invalid
			// ====
			&.ng-invalid {
				> .input > label,
				.error {
					color: map-gets($vars, invalid-color) !important;
				}
				> .input > input,
				> .input > textarea {
					border-bottom-color: map-gets($vars, invalid-color);
				}
			}

			// Valid
			// ====
			&.ng-valid.ng-dirty > .input {
				@include lui_make_icon("check", right);

				&:after {
					top: 1 + map-gets($vars, input, vertical-padding);
					margin: 0 0 0 0.5em !important;
					line-height: 1 + map-gets($vars, input, vertical-padding);
					font-size: map-gets($vars, valid-icon-size);
					color: luiPalette(primary, color);
				}
			}

			.helper,
			.error,
			.count {
				display: block;
				font-size: map-gets($vars, message, font-size);
			}

			// Helper
			// ====
			small.helper {
				color: map-gets($vars, message, helper-color);
				margin-top: 0.25em;
			}


			// Textarea count characters
			.count {
				text-align: right;
			}

			// Required
			// ====
			> .input > input[required] ~ label:after,
			&.required > .input >> .input label:after {
				position: absolute;
				content: '*';
				font-size: lui_rem(1.2);
				display: inline-block;
				margin-left: 0.25em;
				color: luiPalette(red, color);
			}

			// Inputs length (horizontal sizing)
			// ====
			// Defaults to medium
			> .input > input,
			> .input > textarea,
			> .input > select,
			> .input > label,
			.error,
			.helper,
			.count {
				width: map-gets($vars, lengths, medium);
			}
			.unit {
				left: map-gets($vars, lengths, medium);
			}
			> .searchable.input:before {
				left: map-gets($vars, lengths, medium);
			}
			@each $sizeName, $sizeEms in map-gets($vars, lengths) {
				&.#{$sizeName} {
					> .input > input,
					> .input > textarea,
					> .input > select,
					> .input > label,
					.error,
					.helper,
					.count {
						min-width: 0;
						width: $sizeEms !important;
					}
					.unit {
						left: $sizeEms;
					}
					> .searchable.input:before {
						left: $sizeEms;
					}
				}
			}

			// Fitting size: takes up the whole available width
			// ====
			&.fitting {
				> .input > input,
				> .input > textarea,
				> .input > select,
				> .input > label,
				.error,
				.helper,
				.count {
					width: 100%;
				}
				.searchable.input:before {
					left: auto; right: -1em;
				}
			}


			// Searchable field
			// Displays a magnifier icon
			// ====
			> .searchable.input {

				@include lui_make_icon("search", left);
				> input {
					border-top:	1px solid transparent;
					padding-right: 1.2em;
					height: 1 + 2 * map-gets($vars, input, vertical-padding);
				}
				&:before {
					position: absolute;
					top: 1 + map-gets($vars, input, vertical-padding);
					line-height: 1;
					transform: translate(-100%, -50%);
					margin: 0 !important;
					opacity: 0.5;
				}
			}
		}


		// Inline style
		// Fields are stacked on each line
		// Default is block
		// ====
		#{$prefix}.form.inline .field,
		#{$prefix}.fieldset.inline .field,
		#{$prefix}.field.inline {
			display: inline-block;
			vertical-align: top;

			& + .field.inline {
				margin-left: 1em;
			}
		}


		// Select input
		// ====
		#{$prefix}.select.input {
			padding-top: map-gets($vars, field, default-border-width);
			.value {
				position: relative;
				display: block;
				box-sizing: border-box;

				cursor: pointer;

				border-bottom-width: map-gets($vars, field, default-border-width);
				border-bottom-style: map-gets($vars, field, default-border-style);
				border-bottom-color: map-gets($vars, field, default-border-color);

				@extend %input_sizing;
				height: 1 + 2 * map-gets($vars, input, vertical-padding);
				line-height: 1;

				@include lui_make_icon('south chevron', right);
				&:after {
					position: absolute;
					right: 1px;
					margin-top: 0.5em;
					font-size: 8px;
				}
			}
			ul {
				@extend %lui_unstyled_list;
				@extend %lui_raised;
				position: absolute;
				top: map-gets($vars, input, vertical-padding); left: 0;

				background-color: #FFF;

				opacity: 0;
				transform: scale(0);
				transform-origin: top right;
				transition-property: opacity, transform;
				transition-duration: map-gets($vars, transition, duration);
				transition-timing-function: map-gets($vars, transition, easing);

			}
			&.open ul {
				transform: scale(1);
				opacity: 1;
			}
			li {
				padding: map-gets($vars, input, vertical-padding) 1em;
				font-size: map-gets($vars, input, font-size);
				display: block;

				cursor: pointer;
				box-sizing: border-box;

				&:hover {
					background-color: luiPalette(light, color, light);
				}

				&.selected {
					background-color: transparentize(luiPalette(primary, color), 0.9);
					&:hover {
						background-color: transparentize(luiPalette(primary, color), 0.75);
					}
				}
			}
			// Defaults to medium length
			.value, li {
				width: map-gets($vars, lengths, medium);
			}
			@each $sizeName, $sizeEms in map-gets($vars, lengths) {
				&.#{$sizeName} {
					.value,
					li {
						width: $sizeEms !important;
					}
				}
			}
		}


		// Radio & checkbox inputs
		// ====
		#{$prefix}.radio.input,
		#{$prefix}.checkbox.input {
			display: inline-block;
			margin-right: 2em;
			vertical-align: middle;
			position: relative;
			line-height: 1;

			input, label { margin: 0; }

			> input {
				position: absolute;
				z-index: 2;
				left: 0; top: 50%;
				transform: translateY(-50%);
				width: map-gets($vars, input, font-size);
				height: map-gets($vars, input, font-size);
				cursor: pointer;
				opacity: 0;
			}
			label {
				color: luiTheme(element, typography, body, color);
				display: block;
				position: relative;
				padding: 0 0 0 1.75em;

				&[for] {
					cursor: pointer;
				}

				font-size: map-gets($vars, input, font-size);

				&:before {
					position: absolute;
					top: 50%;
					transform: translateY(-50%);
					left: 0;
					display: inline-block;
				}
			}
			&.checkbox {
				label {
					@include lui_make_icon("checkbox");
				}
				input:checked ~ label {
					@include lui_make_icon("checkbox checked");
				}
			}
			&.radio {
				label {
					@include lui_make_icon("radio");
				}
				input:checked ~ label {
					@include lui_make_icon("radio checked");
				}
			}
			input:checked ~ label:before {
				color: luiPalette(primary, color);
			}
			& + label {
				margin-left: 1em;
			}
			// Read only state
			// ====
			&.readonly {
				label,
				input {
					cursor: default;
				}
				input {
					display: none;
				}
			}
		}
	}
}
