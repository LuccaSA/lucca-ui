%lui_input_reset {
	outline: 0;
	outline: none;
	background: transparent;
	margin: 0;

	// Border
	border: none;
	border-bottom-width: luiTheme(element, field, field, default-border-width);
	border-bottom-style: solid;
	border-bottom-color: luiTheme(element, field, field, default-border-color);

	// Transitions
	transition-property: border-bottom-color, box-shadow;
	transition-duration: luiTheme(element, field, transition, duration);
	transition-timing-function: luiTheme(element, field, transition, easing);
}

%lui_input_focus {
	// Focused state
	border-bottom-color: luiTheme(element, field, field, focus-border-color);
	box-shadow: 0 (luiTheme(element, field, field, focus-border-width) - luiTheme(element, field, field, default-border-width)) 0 0 luiTheme(element, field, field, focus-border-color);

	& > ~ label {
		color: luiTheme(element, field, field, focus-border-color);
	}
}

%lui_input_sizing {
	box-sizing: border-box;
	display: block;
	vertical-align: baseline;

	margin: 0;
	padding: luiTheme(element, field, input, vertical-padding) 0;

	height: luiTheme(element, field, input, font-size) + 2 * luiTheme(element, field, input, vertical-padding);

	font-size: luiTheme(element, field, input, font-size);
}

%lui_input_clear {
	@extend %lui_field_input_inner_right_icon;
	width: 1em;
	height: 1em;
	text-align: center;
	border-radius: 50%;
	color: luiTheme(element, typography, body, color);

	&:before {
		font-size: 1.5em;
		line-height: 0.6em;
		display: block;
		content: "\00d7";
	}

	&:hover {
		background-color: luiPalette(grey, color);
		color: luiPalette(grey, text);
	}
}

%lui_input_label {
	font-size: luiTheme(element, field, input, font-size);
	line-height: normal;
	box-sizing: border-box;
	overflow: hidden;
	white-space: pre;
	text-overflow: ellipsis;
}

%lui_input_label_displacable {
	position: absolute;
	pointer-events: none;
	top: luiTheme(element, field, input, vertical-padding);
	left: 0;

	color: luiTheme(element, field, label, color);

	transition-property: top, font-size, color;
	transition-duration: luiTheme(element, field, transition, duration);
	transition-timing-function: luiTheme(element, field, transition, easing);
}

%lui_input_label_displaced {
	top: -(2 - luiTheme(element, field, label, displaced-font-size)) !important;
	font-size: luiTheme(element, field, label, displaced-font-size);
}

%lui_input_invalid_input {
	border-bottom-color: luiTheme(element, field, invalid-color);
	box-shadow: 0 (luiTheme(element, field, field, focus-border-width) - luiTheme(element, field, field, default-border-width)) 0 0 luiTheme(element, field, invalid-color);;
}

%lui_input_invalid_label {
	color: luiTheme(element, field, invalid-color);
}

%lui_field_input_inner_right_icon {
	position: absolute;
	bottom: lui_rem(luiTheme(element, field, input, vertical-padding) * (1 + luiTheme(element, field, input, font-size)));
	right: 0;
	line-height: 1;
	transform: translate(-50%, 50%);
	margin: 0 !important;
	opacity: 0.5;

	&.is-valid {
		right: 1em;
	}
}

%lui_searchable_input {
	@include lui_make_icon("search", left);
	> input {
		padding-right: 1.2em;
	}
	&:before {
		@extend %lui_field_input_inner_right_icon;
	}
}

%lui_tagged_input {
	@include display-flex();
	@include flex-wrap(wrap);
}
%lui_tagged_input_tag {
	display: inline-block;
	background-color: luiPalette(light, color, light);
	color: luiPalette(light, text);
	border-radius: 2em;
	padding: 0.25em 0.5em;
	margin: 0.1em 0.5em 0.1em 0;

	user-select: none;
	-moz-user-select: none;
	-webkit-user-select: none;
	-ms-user-select: none;

	&:hover {
		background-color: luiPalette(grey, color);
		color: luiPalette(grey, text);
	}
}
%lui_tagged_input_tag_active {
	background-color: luiPalette(primary, color);
	color: luiPalette(primary, text);
}
%lui_tagged_input_input {
	min-width: 10em;
	@include flex(1, 1, 0%);
}
%lui_tagged_input_close {
	float: right;
	font-size: lui_rem(1.5);
	opacity: 0.5;
	margin-left: 0.25em;
	color: inherit;
	&:hover {
		opacity: 1;
	}
}

%lui_dropdown_base {
	position: relative;
	margin: luiTheme(element, field, vertical-margin) 0;

	// Sizing
	// ====
	width: luiTheme(element, field, lengths, medium);

	@each $sizeName, $sizeEms in luiTheme(element, field, lengths) {
		&.#{$sizeName} {
			width: $sizeEms !important;
		}
	}
}
%lui_dropdown_list {
	@extend %lui_unstyled_list;
	@include lui_raised(2);
	position: absolute;
	z-index: 2;
	top: 100%;
	left: 0;

	min-width: 100%;

	background-color: #FFF;

	opacity: 0;
	transform: scale(0);
	transform-origin: top center;
	transition-property: opacity, transform;
	transition-duration: luiTheme(element, field, transition, duration);
	transition-timing-function: luiTheme(element, field, transition, easing);

	max-height: 20em;
	overflow: auto;
}
%lui_dropdown_list_dropped {
	transform: scale(1);
	opacity: 1;
}
%lui_dropdown_list_item {
	position: relative;
	padding: 0;

	a {
		display: block;
		font-size: luiTheme(element, field, input, font-size);
		color: luiTheme(element, typography, body, color);
		padding: luiTheme(element, field, input, vertical-padding) 1em;
		text-decoration: none;
		opacity: 0.85;
	}
	&.disabled a {
		cursor: default;
		color: rgba(0, 0, 0, 0.26);
	}
	&.active a,
	&:not(.disabled) a:hover {
		opacity: 1;
		background-color: luiPalette(light, color, light);
	}
	&.dividing:after {
		display: block;
		content: '';
		position: absolute;
		z-index: 1;
		top: 100%;
		left: 0; right: 0;
		border-bottom: 1px solid luiTheme(element, field, field, default-border-color);
	}


	.label {
		float: right;
		margin-right: 0;
		font-size: lui_rem(0.9);
		font-weight: 600;
	}
}

@if luiTheme(element, field, enabled) {
	@at-root #{$namespace} {

		$vars: luiTheme(element, field);

		// Forms are a whole group of inputs.
		// Best practice: You should have only one (displayed) form per page.
		// ====
		#{$prefix}.form {

		}

		// Fieldsets are a group of fields
		// ====
		#{$prefix}.form fieldset,
		#{$prefix}.fieldset {

			// A fieldset can have a legend
			> legend,
			.legend {
				display: block;
				font-size: map-gets($vars, fieldset, legend, font-size);
				font-weight: map-gets($vars, fieldset, legend, font-weight);
			}
		}


		// Fields are a label coupled with an input and a potential validation message
		// ====
		#{$prefix}.field,
		#{$prefix}.fieldset .field {

			margin: map-gets($vars, vertical-margin) 0;

			& > .field {
				margin: 0;
			}

			position: relative;
			font-size: map-gets($vars, font-size);

			// Messages
			// ====
			.message {
				display: block;
				font-size: map-gets($vars, message, font-size);
				line-height: normal;
				margin-top: 0.5em;
			}

			// Helper
			// ====
			.helper.message {
				color: map-gets($vars, message, helper-color);
			}


			// Textarea count characters
			.count {
				text-align: right;
			}
		}


		#{$prefix}.input {
			position: relative;

			@include display-flex();
			@include flex-align-items(center);

			> input:not([type="checkbox"]):not([type="radio"]),
			> textarea,
			> select,
			.unit {
				@extend %lui_input_sizing;
			}

			> input:not([type="checkbox"]):not([type="radio"]),
			> textarea {
				@extend %lui_input_reset;
			}

			> input:not([type="checkbox"]):not([type="radio"]):focus,
			> textarea:focus,
			&.focused > input:not([type="checkbox"]):not([type="radio"]),
			&.focused > textarea {
				@extend %lui_input_focus;
			}

			// Textarea specifics
			// ====
			textarea {
				resize: vertical;
			}

			// label
			// ====
			&:not(.radio):not(.checkbox) > label {
				@extend %lui_input_label_displacable;
			}

			& > label {
				@extend %lui_input_label;
			}

			// Unit
			// ====
			.unit {
				width: auto;
				font-weight: 600;
				margin-left: 0.5em;
				margin-bottom: map-gets($vars, input, default-border-width);
			}

			// Label displacement when focused or filled
			// ====
			&.filled > label,
			&.focused > label,
			& > *[placeholder]:not([placeholder=" "]) ~ label,
			// & > *:not([placeholder=" "]) ~ label,
			& > *:not([type="checkbox"]):not([type="radio"]).ng-not-empty ~ label,
			& > *:not([type="checkbox"]):not([type="radio"]):focus ~ label {
				@extend %lui_input_label_displaced;
				width: auto !important;
				min-width: 100%;
			}

			// Searchable input
			// Displays a magnifier icon
			// ====
			&.searchable {
				@extend %lui_searchable_input;
			}

			// Empty button
			// ====
			i.empty {
				@extend %lui_input_clear;

				cursor: pointer;
			}
		}


		// Required
		// ====
		#{$prefix}.input > input[required]:not([type="checkbox"]):not([type="radio"]) ~ label:after,
		#{$prefix}.input > luid-date-picker-popup[required] ~ label:after,
		#{$prefix}.field.required > .input > .input label:after {
			position: absolute;
			content: '*';
			font-size: lui_rem(1.2);
			display: inline-block;
			margin-left: 0.25em;
			color: luiPalette(red, color);
		}


		// Invalid
		// ====
		#{$prefix}.input > *.ng-touched.ng-invalid ~ label,
		#{$prefix}.input > *.ng-not-empty.ng-pristine.ng-invalid ~ label,
		#{$prefix}.input.ng-invalid > label,
		#{$prefix}.field .error {
			@extend %lui_input_invalid_label;
		}
		#{$prefix}.input > *.ng-invalid.ng-touched:not([type="checkbox"]):not([type="radio"]),
		#{$prefix}.input > *.ng-not-empty.ng-pristine.ng-invalid:not([type="checkbox"]):not([type="radio"]) {
			@extend %lui_input_invalid_input;
		}


		// Valid
		// !!! This class goes on the .input div itself !!!
		// ====
		#{$prefix}.is-valid.input {
			@include lui_make_icon("check", right);
			&:after {
				@include lui_is_animated('right fade in');

				line-height: 1 + map-gets($vars, input, vertical-padding);
				font-size: map-gets($vars, valid-icon-size);
				color: map-gets($vars, valid-color);
			}
		}


		// Field length (horizontal sizing)
		// ====
		// Defaults to medium
		#{$prefix}.input > input,
		#{$prefix}.input > textarea,
		#{$prefix}.input:not(.checkbox):not(.radio) > label {
			width: map-gets($vars, lengths, medium);
		}

		// Sizing
		@each $sizeName, $sizeEms in map-gets($vars, lengths) {
			#{$prefix}.field.#{$sizeName} > .input > input,
			#{$prefix}.field.#{$sizeName} > .input > textarea,
			#{$prefix}.field.#{$sizeName} .message {
				min-width: 0;
				width: $sizeEms;
			}
		}

		// Fitting size: takes up the whole available width
		// ====
		#{$prefix}.fitting.field {
			> .input > input,
			> .input > textarea,
			.message {
				width: 100%;
			}
		}


		// Inline style
		// Fields are stacked on each line
		// Default is block
		// ====
		#{$prefix}.form.inline .field,
		#{$prefix}.fieldset.inline .field,
		#{$prefix}.field.inline {
			display: inline-block;
			vertical-align: top;

			& + .field.inline {
				margin-left: 1em;
			}
		}


		// Radio & checkbox inputs
		// ====
		#{$prefix}.radio.input,
		#{$prefix}.checkbox.input {
			display: inline-block;
			margin-right: 2em;
			vertical-align: middle;
			position: relative;
			line-height: 1;

			input, label { margin: 0; }

			> input {
				position: absolute;
				z-index: 2;
				left: 0; top: 50%;
				transform: translateY(-50%);
				width: map-gets($vars, input, font-size);
				height: map-gets($vars, input, font-size);
				cursor: pointer;
				opacity: 0;
			}
			label {
				color: luiTheme(element, typography, body, color);
				display: block;
				position: relative;
				padding: 0 0 0 1.75em;

				&[for] {
					cursor: pointer;
				}

				font-size: map-gets($vars, input, font-size);

				&:before {
					position: absolute;
					top: 50%;
					transform: translateY(-50%);
					left: 0;
					display: inline-block;
				}
			}
			&.checkbox {
				label {
					@include lui_make_icon("checkbox");
				}
				input:checked ~ label {
					@include lui_make_icon("checkbox checked");
				}
			}
			&.radio {
				label {
					@include lui_make_icon("radio");
				}
				input:checked ~ label {
					@include lui_make_icon("radio checked");
				}
			}
			input:checked ~ label:before {
				color: luiPalette(primary, color);
			}
			& + label {
				margin-left: 1em;
			}
			// Read only state
			// ====
			&.readonly {
				label,
				input {
					cursor: default;
				}
				input {
					display: none;
				}
			}
		}


		// Tagged input
		// ====
		#{$prefix}.tagged.input {
			@extend %lui_tagged_input;
			.tag {
				@extend %lui_tagged_input_tag;

				&.selected {
					@extend %lui_tagged_input_tag_active;
				}
			}
			.close {
				text-decoration: none;
				@extend %lui_tagged_input_close;
				&:after {
					content: "\00d7";
				}
			}
			input {
				@extend %lui_tagged_input_input;
			}
		}


		// Angular UI dropdown
		// ====
		.dropdown {
			@extend %lui_dropdown_base;

			.dropdown-menu {
				@extend %lui_dropdown_list;
			}
			&.open {
				.dropdown-menu {
					@extend %lui_dropdown_list_dropped;
				}
			}
		}
		[uib-dropdown] {
			#{$prefix}.button {
				margin: 0;
			}
			[uib-dropdown-toggle] {
				@include lui_make_icon("south chevron", right);
				&:after {
					font-size: 0.5em;
				}
			}
			&.open #{$prefix}.button {
				border-bottom-left-radius: 0;
				border-bottom-right-radius: 0;
			}
			.button + .dropdown-menu {
				margin-top: 0.5em;
				left: 1px;
			}
			ul li {
				@extend %lui_dropdown_list_item;
				a {
					font-size: 1em;
				}
			}
		}


		// Angular UI bootstrap UI-select
		// ====
		.ui-select-container {
			// Label
			// ====
			& ~ label {
				@extend %lui_input_label;
				@extend %lui_input_label_displacable;
			}
			&.open ~ label,
			&.ng-not-empty ~ label {
				@extend %lui_input_label_displaced;
			}

			&.open:not([search-enabled="false"]) {
				@extend %lui_searchable_input;
			}

			.btn {
				cursor: pointer;
				overflow: hidden;
				text-overflow: ellipsis;
				outline: 0;
				outline: none;

				@extend %lui_user_select_none;
			}

			.ui-select-offscreen {
				display: none;
			}

			.ui-select-match .ui-select-toggle,
			.ui-select-search {
				@extend %lui_input_sizing;
				@extend %lui_input_reset;

				width: 100%;
			}

			&:not(.open) .ui-select-toggle,
			&.ui-select-multiple:not(.open) > div {
				@include lui_make_icon('south chevron', right);
				&:after {
					@extend %lui_field_input_inner_right_icon;
					font-size: 8px;
				}
			}

			.ui-select-placeholder,
			.ui-select-search::-webkit-input-placeholder {
				font-size: lui_rem(1);
				white-space: pre;
			}

			&.open .ui-select-search {
				@extend %lui_input_focus;
			}
			&:not(.ui-select-multiple) .ui-select-search {
				width: 100% !important;
			}

			// Clear
			.glyphicon-remove {
				@extend %lui_input_clear;
				right: 0.75em;
			}

			.ui-select-choices {
				&.ng-hide {
					display: block !important;
				}
			}

			.ui-select-choices-row {
				position: relative;
				@extend %lui_dropdown_list_item;
			}

			&.direction-up {
				.ui-select-choices {
					top: auto !important;
					bottom: 100%;
					transform-origin: bottom right;
				}
				&[search-enabled="false"] .ui-select-choices {
					bottom: 0 !important;
				}
			}

			&[search-enabled="false"] {
				.ui-select-match.ng-hide {
					display: block !important;
				}
				.ui-select-choices {
					top: 0;
					left: -1em;
					right: -1em;
				}
			}

			// Invalid
			// ====
			&.ng-invalid.ng-touched {
				.ui-select-toggle,
				.ui-select-search {
					@extend %lui_input_invalid_input;
				}

				& ~ label {
					@extend %lui_input_invalid_label;
				}
			}


			// Multiselect
			// ====
			&.ui-select-multiple {
				// Angular UI hack: input width calculus is all wrong
				margin-top: -1px;
				margin-bottom: -1px;
				.ui-select-search {
					padding-top: 0;
					padding-bottom: 0;
					padding-right: 10px;
					box-sizing: content-box;
				}

				> div {
					@extend %lui_tagged_input;
				}

				.ui-select-search {
					@extend %lui_tagged_input_input;
				}
				.ui-select-match-item {
					@extend %lui_tagged_input_tag;
				}
				.close {
					@extend %lui_tagged_input_close;
				}
				.btn-primary, .btn-primary:hover {
					@extend %lui_tagged_input_tag_active;
				}
			}

			// Natural style
			// ====
			&.natural {
				display: inline-block;
				vertical-align: middle;
				margin: 0 0.5em;
				margin-bottom: map-gets($vars, input, vertical-padding);
				width: auto;

				.ui-select-toggle {
					padding-right: 1.5em;
				}

				&, .ui-select-toggle, a {
					font-size: 1em;
				}

				.ui-select-choices {
					min-width: 15em;
					left: 50%;

					transform: scale(0) translateX(-50%);
					&:not(.ng-hide) {
						transform: scale(1) translateX(-50%);
					}
				}
			}
		}


		// Percentage
		// ====
		luid-percentage {
			> .input {
				input {
					width: 2.5em !important;
					text-align: right;
				}
			}
		}


		// Timespan picker
		// ====
		luid-timespan {
			input {
				width: 4em !important;
			}
		}


		// Moment picker
		// ====
		luid-moment {
			input {
				text-align: center;
			}
			.input {
				width: 3em !important;
			}
		}


		// User picker
		// ====
		luid-user-picker {
			.selected-first {
				font-weight: 600;
			}
		}
	}
}
