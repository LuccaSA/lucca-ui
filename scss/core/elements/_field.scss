%input_sizing {
	box-sizing: border-box;
	display: inline-block;
	vertical-align: baseline;

	margin: 0; // Reset
	margin-top: luiTheme(element, field, input, vertical-padding);

	padding: 0; // Reset
	padding-bottom: luiTheme(element, field, input, vertical-padding);

	height: 1 + 2 * luiTheme(element, field, input, vertical-padding);

	font-size: luiTheme(element, field, input, font-size);
}

%input_label_displaced {
	top: -(2 - luiTheme(element, field, label, displaced-font-size)) !important;
	font-size: luiTheme(element, field, label, displaced-font-size);
}

%field_input_inner_right_icon {
	position: absolute;
	top: 1 + luiTheme(element, field, input, vertical-padding);
	line-height: 1;
	transform: translate(-100%, -50%);
	margin: 0 !important;
	opacity: 0.5;
}


@if luiTheme(element, field, enabled) {
	@at-root #{$namespace} {

		$vars: luiTheme(element, field);

		// Forms are a whole group of inputs.
		// Best practice: You should have only one (displayed) form per page.
		// ====
		#{$prefix}.form {

		}

		// Fieldsets are a group of fields
		// ====
		#{$prefix}.form .fieldset,
		#{$prefix}.form fieldset,
		#{$prefix}.fieldset {

			// A fieldset can have a legend
			> legend,
			.legend {
				display: block;
				font-size: map-gets($vars, fieldset, legend, font-size);
				font-weight: map-gets($vars, fieldset, legend, font-weight);
			}
		}


		// Fields are a label coupled with an input and a potential validation message
		// ====
		#{$prefix}.form .field,
		#{$prefix}.field,
		#{$prefix}.fieldset .field {

			margin: map-gets($vars, vertical-margin) 0;

			& > .field {
				margin: 0;
			}

			position: relative;
			font-size: map-gets($vars, font-size);

			// Messages
			// ====
			.message {
				display: block;
				font-size: map-gets($vars, message, font-size);
			}

			// Helper
			// ====
			.helper.message {
				color: map-gets($vars, message, helper-color);
				margin-top: 0.25em;
			}


			// Textarea count characters
			.count {
				text-align: right;
			}
		}

		#{$prefix}.input {
			@include display-flex();
			@include flex-align-items(center);

			// Input styling reset
			> input:-webkit-autofill {
				-webkit-box-shadow: 0 0 0 1000px white inset !important;
			}
			> input:not([type="checkbox"]):not([type="radio"]),
			> textarea,
			> select,
			.unit {
				@extend %input_sizing;
			}
			> input:not([type="checkbox"]):not([type="radio"]),
			> textarea {
				outline: 0;
				outline: none;
				box-shadow: none;
				background: transparent;

				// Border
				border: none;
				border-bottom-width: map-gets($vars, field, default-border-width);
				border-bottom-style: map-gets($vars, field, default-border-style);
				border-bottom-color: map-gets($vars, field, default-border-color);

				// Transitions
				transition-property: border-bottom-color;
				transition-duration: map-gets($vars, transition, duration);
				transition-timing-function: map-gets($vars, transition, easing);
			}
			> input:not([type="checkbox"]):not([type="radio"]):focus,
			> textarea:focus,
			&.focused > input:not([type="checkbox"]):not([type="radio"]),
			&.focused > textarea {
				padding-top: map-gets($vars, field, focus-border-width) - map-gets($vars, field, default-border-width);

				// Focused state
				border-bottom-width: map-gets($vars, field, focus-border-width);
				border-bottom-style: map-gets($vars, field, focus-border-style);
				border-bottom-color: map-gets($vars, field, focus-border-color);

				& > ~ label {
					color: map-gets($vars, field, focus-border-color);
				}
			}

			// Textarea specifics
			// ====
			textarea {
				resize: vertical;
			}

			// label
			// ====
			&:not(.radio):not(.checkbox) > label {
				position: absolute;
				pointer-events: none;
				top: map-gets($vars, input, vertical-padding);
				left: 0;

				color: map-gets($vars, label, color);

				transition-property: top, font-size, color;
				transition-duration: map-gets($vars, transition, duration);
				transition-timing-function: map-gets($vars, transition, easing);
			}

			& > label {
				font-size: map-gets($vars, input, font-size);
				box-sizing: border-box;
				overflow: hidden;
				white-space: pre;
				text-overflow: ellipsis;
			}

			// Unit
			// ====
			.unit {
				font-weight: 600;
				margin-left: 0.5em;
				line-height: 1 + map-gets($vars, input, vertical-padding);
				font-size: lui_rem(1);
			}

			// Label displacement when focused or filled
			// ====
			&.filled > label,
			&.focused > label,
			& > *:not([type="checkbox"]):not([type="radio"]).ng-not-empty ~ label,
			& > *:not([type="checkbox"]):not([type="radio"]):focus ~ label {
				@extend %input_label_displaced;
				width: auto !important;
				min-width: 100%;
			}

			// Searchable input
			// Displays a magnifier icon
			// ====
			&.searchable {

				@include lui_make_icon("search", left);
				> input {
					border-top:	1px solid transparent;
					padding-right: 1.2em;
					height: 1 + 2 * map-gets($vars, input, vertical-padding);
				}
				&:before {
					@extend %field_input_inner_right_icon;
				}
			}

			// Empty button
			// ====
			i.empty {
				@include lui_make_icon("cross", right);
				@extend %field_input_inner_right_icon;

				cursor: pointer;
			}
		}


		// Required
		// ====
		#{$prefix}.input > input[required]:not([type="checkbox"]):not([type="radio"]) ~ label:after,
		#{$prefix}.field.required > .input > .input label:after {
			position: absolute;
			content: '*';
			font-size: lui_rem(1.2);
			display: inline-block;
			margin-left: 0.25em;
			color: luiPalette(red, color);
		}


		// Invalid
		// ====
		#{$prefix}.input > *.ng-touched.ng-invalid ~ label,
		#{$prefix}.input > *.ng-not-empty.ng-pristine.ng-invalid ~ label,
		#{$prefix}.input.ng-invalid > label,
		#{$prefix}.field .error {
			color: map-gets($vars, invalid-color) !important;
		}
		#{$prefix}.input > *.ng-invalid.ng-touched:not([type="checkbox"]):not([type="radio"]),
		#{$prefix}.input > *.ng-not-empty.ng-pristine.ng-invalid:not([type="checkbox"]):not([type="radio"]) {
			border-bottom-color: map-gets($vars, invalid-color) !important;
		}


		// Valid
		// !!! This class goes on the .input div itself !!!
		// ====
		#{$prefix}.is-valid.input {
			@include lui_make_icon("check", right);
			&:after {
				@include lui_is_animated('right fade in');

				line-height: 1 + map-gets($vars, input, vertical-padding);
				font-size: map-gets($vars, valid-icon-size);
				color: map-gets($vars, valid-color);
			}
		}


		// Field length (horizontal sizing)
		// ====
		// Defaults to medium
		#{$prefix}.input > input:not([type="checkbox"]):not([type="radio"]),
		#{$prefix}.input > textarea,
		#{$prefix}.input > select,
		#{$prefix}.input:not(.checkbox):not(.radio) > label {
			width: map-gets($vars, lengths, medium);
		}
		#{$prefix}.input .unit {
			left: map-gets($vars, lengths, medium);
		}
		#{$prefix}.searchable.input:before {
			left: map-gets($vars, lengths, medium);
		}

		// !!! Size goes on field
		@each $sizeName, $sizeEms in map-gets($vars, lengths) {
			#{$prefix}.field.#{$sizeName} > .input > input:not([type="checkbox"]):not([type="radio"]),
			#{$prefix}.field.#{$sizeName} > .input > textarea,
			#{$prefix}.field.#{$sizeName} > .input > label,
			#{$prefix}.field.#{$sizeName} .message {
				min-width: 0;
				width: $sizeEms;
			}
			#{$prefix}.field.#{$sizeName} > .searchable.input:before {
				left: $sizeEms;
			}
		}

		// Fitting size: takes up the whole available width
		// ====
		#{$prefix}.fitting.field {
			> .input > input:not([type="checkbox"]):not([type="radio"]),
			> .input > textarea,
			> .input > select,
			> .input > label,
			.message {
				width: 100%;
			}
			.searchable.input:before {
				left: auto;
				right: -1em;
			}
		}


		// Inline style
		// Fields are stacked on each line
		// Default is block
		// ====
		#{$prefix}.form.inline .field,
		#{$prefix}.fieldset.inline .field,
		#{$prefix}.field.inline {
			display: inline-block;
			vertical-align: top;

			& + .field.inline {
				margin-left: 1em;
			}
		}


		// Select input
		// ====
		#{$prefix}.select.input {
			padding-top: map-gets($vars, field, default-border-width);
			.value {
				position: relative;
				display: block;
				box-sizing: border-box;

				cursor: pointer;

				border-bottom-width: map-gets($vars, field, default-border-width);
				border-bottom-style: map-gets($vars, field, default-border-style);
				border-bottom-color: map-gets($vars, field, default-border-color);

				@extend %input_sizing;
				height: 1 + 2 * map-gets($vars, input, vertical-padding);
				line-height: 1;

				@include lui_make_icon('south chevron', right);
				&:after {
					position: absolute;
					right: 1px;
					margin-top: 0.5em;
					font-size: 8px;
				}
			}
			ul {
				@extend %lui_unstyled_list;
				@extend %lui_raised;
				position: absolute;
				z-index: 2;
				top: map-gets($vars, input, vertical-padding); left: 0;

				background-color: #FFF;

				opacity: 0;
				transform: scale(0);
				transform-origin: top right;
				transition-property: opacity, transform;
				transition-duration: map-gets($vars, transition, duration);
				transition-timing-function: map-gets($vars, transition, easing);

			}
			&.open ul {
				transform: scale(1);
				opacity: 1;
			}
			li {
				padding: map-gets($vars, input, vertical-padding) 1em;
				font-size: map-gets($vars, input, font-size);
				display: block;

				cursor: pointer;
				box-sizing: border-box;

				&:hover {
					background-color: luiPalette(light, color, light);
				}

				&.selected {
					background-color: transparentize(luiPalette(primary, color), 0.9);
					&:hover {
						background-color: transparentize(luiPalette(primary, color), 0.75);
					}
				}
			}
			// Defaults to medium length
			.value, li {
				width: map-gets($vars, lengths, medium);
			}
			@each $sizeName, $sizeEms in map-gets($vars, lengths) {
				&.#{$sizeName} {
					.value,
					li {
						width: $sizeEms !important;
					}
				}
			}
		}


		// Radio & checkbox inputs
		// ====
		#{$prefix}.radio.input,
		#{$prefix}.checkbox.input {
			display: inline-block;
			margin-right: 2em;
			vertical-align: middle;
			position: relative;
			line-height: 1;

			input, label { margin: 0; }

			> input {
				position: absolute;
				z-index: 2;
				left: 0; top: 50%;
				transform: translateY(-50%);
				width: map-gets($vars, input, font-size);
				height: map-gets($vars, input, font-size);
				cursor: pointer;
				opacity: 0;
			}
			label {
				color: luiTheme(element, typography, body, color);
				display: block;
				position: relative;
				padding: 0 0 0 1.75em;

				&[for] {
					cursor: pointer;
				}

				font-size: map-gets($vars, input, font-size);

				&:before {
					position: absolute;
					top: 50%;
					transform: translateY(-50%);
					left: 0;
					display: inline-block;
				}
			}
			&.checkbox {
				label {
					@include lui_make_icon("checkbox");
				}
				input:checked ~ label {
					@include lui_make_icon("checkbox checked");
				}
			}
			&.radio {
				label {
					@include lui_make_icon("radio");
				}
				input:checked ~ label {
					@include lui_make_icon("radio checked");
				}
			}
			input:checked ~ label:before {
				color: luiPalette(primary, color);
			}
			& + label {
				margin-left: 1em;
			}
			// Read only state
			// ====
			&.readonly {
				label,
				input {
					cursor: default;
				}
				input {
					display: none;
				}
			}
		}
	}
}
