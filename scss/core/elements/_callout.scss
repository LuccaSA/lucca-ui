
// ===================================
// ============= Mixins ==============
// ===================================

// Coloring support
// ===================================

@mixin lui_callout_coloring($scheme) {
	// Regular style
	&:not(.filled) {
		&:after {
			background: map-get($scheme, color);
		}
	}

	// Filled style
	&.filled {
		background-color: map-get($scheme, color);
		border-color: darken(map-get($scheme, color), 5);

		&,
		&:before,
		a,
		button {
			color: map-get($scheme, text);
		}

		@if luiIsLod($scheme) {
			text-shadow: 0 1px 1px darken(map-get($scheme, color), 15);
		}

		> .footer {
			background-color: darken(map-get($scheme, color), 3);
		}
	}
}


// ===================================
// ============= Element =============
// ===================================

#{$prefix}.callout {
	display: block;
	box-sizing: border-box;
	position: relative;

	@extend #{$prefix}.raised;

	margin: result($vars, margin vertical) result($vars, margin horizontal);
	border: 1px solid result($vars, border color);
	background: result($vars, background);
	padding: result($vars, padding vertical) result($vars, padding horizontal);


	// Header
	> .header {
		padding: (result($vars, padding vertical)) (result($vars, padding horizontal)) (result($vars, padding vertical)/2) (result($vars, padding horizontal));
		margin: (- result($vars, padding vertical)) (- result($vars, padding horizontal)) 0.5em (- result($vars, padding horizontal));
	}


	// Footer
	> .footer {
		text-align: right;
		margin: result($vars, padding vertical) (- result($vars, padding horizontal)) (- result($vars, padding vertical)) (- result($vars, padding horizontal));
		padding: result($vars, padding vertical) result($vars, padding horizontal);
	}

	// Handle border
	&:after {
		visibility: visible !important; // neutralise possible clearfix
		position: absolute;
		z-index: result($vars, border z-index);
		display: block;
		content: "";
	}
	// Position - defaults to left
	&:after {
		top: 0;
		left: 0;
		width: result($vars, border width);
		min-height: 100%;
	}
	&[class*="up callout"]:after {
		top: 0;
		left: 0;
		width: 100%;
		min-height: result($vars, border width);
	}
	&[class*="right callout"]:after {
		top: 0;
		left: auto;
		right: 0;
		width: result($vars, border width);
		min-height: 100%;
	}
	&[class*="left callout"]:after {
		top: 0;
		left: 0;
		width: result($vars, border width);
		min-height: 100%;
	}
	&[class*="down callout"]:after {
		top: auto;
		bottom: 0;
		left: 0;
		width: 100%;
		min-height: result($vars, border width);
	}
}


// Filled style
// =====
#{$prefix}.callout.filled {
	&:after {
		display: none;
	}
}


// Coloring support
// ===================================

// Default coloring
// =====
#{$prefix}.callout {
	// Default coloring scheme
	@include lui_callout_coloring(result($vars, styles default coloring));
	// Coloring support
	@each $name, $scheme in luiPalettes() {
		&.#{map-get($scheme, class)} {
			@include lui_callout_coloring($scheme);
		}
	}
}



// Callouts
// =====
#{$prefix}.callouts {
	@extend #{$prefix}.clear;
	> #{$prefix}.callout {
		margin: 0;

		&:not(.filled):not(:first-child) {
			border-top: none;
		}
	}
}

// Attached progress support
// ===================================
#{$prefix}.callout .progress.attached {
	position: absolute;
	z-index: result($vars, progress z-index);
	top: 0;
	left: 0;
	right: 0;
	margin: 0;

	> .indicator {
		min-height: result($vars, border width);
		border-radius: 0;

		&:after {
			content: "";
		}
	}
}
#{$prefix}[class*="down callout"] .progress.attached {
	top: auto;
	bottom: 0;
}
