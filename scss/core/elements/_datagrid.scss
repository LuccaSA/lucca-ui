#{$prefix}.datagrid {
	background-color: map-gets($vars, background);
	text-align: map-gets($vars, textAlignment);
	@extend #{$prefix}.raised;

	[colspan] { text-align: center; }
	[rowspan] { vertical-align: top; }


	// Columns
	// =====
	.columns {
		display: inline-block;
		vertical-align: top;

		table {
			table-layout: fixed;
		}

		// Merged columns
		table table {
			width: 100%;
			tr:not(:first-child) .cell {
				padding: map-gets($vars, cell, padding);
			}
			tr:not(:last-child) .cell {
				border-bottom: 1px dashed darken(map-gets($vars, header, background), 7);
			}
			.cell:not(:last-child) {
				border-right-style: dashed;
			}
		}
	}


	// Cell
	// =====
	.cell {
		padding: map-gets($vars, cell, padding);
		box-sizing: border-box;

		border-right: 1px solid #CCC;

		// Sizes (width)
		&.wide {
			max-width: map-gets($vars, cell, sizes, wide);
			min-width: map-gets($vars, cell, sizes, wide);
		}

		&.narrow {
			max-width: map-gets($vars, cell, sizes, narrow);
			min-width: map-gets($vars, cell, sizes, narrow);
		}
	}

	.sortable {
		display: block;
		cursor: pointer;
		&.asc {
			@include lui_make_icon("south arrow");
		}
		&.desc {
			@include lui_make_icon("north arrow");
		}
		&:before {
			float: right;
			font-size: 0.6em;
			padding: 0.5em;
			line-height: 1;
			@extend #{$prefix}.rounded;
			color: map-gets($vars, header, background);
			background-color: map-gets($vars, header, text);
		}
	}


	// Toolbar
	// =====
	.toolbar {
		background-color: map-gets($vars, toolbar, background);
		color: map-gets($vars, toolbar, text);
	}


	// Header
	// =====
	> .header {
		background-color: map-gets($vars, header, background);

		overflow: hidden;
		color: map-gets($vars, header, text);
		a {
			color: map-gets($vars, header, text);
			&:hover { text-decoration: none; }
		}

		.columns {
			overflow: hidden;
			vertical-align: bottom;
		}

		.cell {
			border-right-color: darken(map-gets($vars, header, background), 7);
			padding-top: map-gets($vars, header, cellPaddingTop);
		}
	}


	// Content
	// =====
	> .content {
		overflow: hidden;

		.columns:not(.locked) {
			overflow: scroll;
		}

		.cell {
			white-space: nowrap;
			overflow: hidden;
			text-overflow: ellipsis;
		}
	}


	// Locked columns
	// =====
	.locked.columns {
		overflow: hidden;
		th, td {
			&:not(.wide):not(.narrow) {
				min-width: 10em;
				max-width: 10em;
			}
		}
	}

	// Rows
	// =====

	// Zebra support
	&.zebra {
		> .content > .columns > table > tbody > tr:nth-child(2n) {
			background-color: map-gets($vars, rows, zebraColor);
		}
	}

	// Hover color
	tr.hovering {
		background-color: map-gets($vars, rows, hoverColor) !important;
	}
}
