@at-root #{$namespace} {

	@if luiTheme(element, datepicker, enabled) {
		$vars: luiTheme(element, datepicker);

		luid-date-picker,
		luid-date-picker-popup,
		luid-daterange-picker {
			display: inline-block;
		}
		luid-date-picker-popup,
		luid-daterange-picker {
			.lui.datepicker.input {
				position: relative;
				width: map-gets($vars, input, width);

				input, label {
					width: 100% !important;
					padding-right: 2.25em;
				}

				&.empty {
					i.empty { display: none; }
					@include lui_make_icon("calendar", right);
					&:after {
						@extend %lui_field_input_inner_right_icon;
					}
				}
			}
			> .popover > .popover-inner {
				text-align: center;
			}

		}
		luid-daterange-picker {
			.lui.tagged.input {
				width: 2 * map-gets($vars, input, width);
				.tag {
					cursor: pointer;
				}
			}
		}

		luid-date-picker,
		luid-date-picker-popup .popover-content,
		luid-daterange-picker .popover-content {
			position: relative;

			> button.previous,
			> button.next {
				display: block;
				background: transparent;
				border: none;
				outline: 0; outline: none;

				position: absolute;
				z-index: 2;
				top: 0.5em;

				padding: 0.5em 1em;
				border-radius: 3px;

				font-family: 'lucca-icons';
				font-size: lui_rem(0.8);

				&:hover {
					background-color: luiPalette(light, color, light);
				}
			}
			> button.previous {
				left: 1em;
				&:before {
					content: "\e053";
				}
			}
			> button.next {
				right: 1em;
				&:before {
					content: "\e054";
				}
			}

			> table {
				display: inline-block;
				vertical-align: top;
				margin: 0 .25em;
				border-collapse: collapse;

				@extend %#{$cleanNamespace}-animated;

				&.previous {
					animation-name: leftFadeIn;
				}
				&.next {
					animation-name: rightFadeIn;
				}

				> caption {
					padding: map-gets($vars, header, padding, vertical) map-gets($vars, header, padding, horizontal);

					font-size: map-gets($vars, header, font-size);
					font-weight: map-gets($vars, header, font-weight);

					> span {
						display: inline-block;
						vertical-align: middle;
					}
				}

				> tbody > tr > td,
				> thead > tr > th {
					width: map-gets($vars, day, size);
					height: map-gets($vars, day, size);
				}

				> thead > tr > th {
					color: map-gets($vars, heads, color);
					font-weight: map-gets($vars, heads, font-weight);
				}

				> tbody > tr > td {
					text-align: center;
					color: map-gets($vars, day, color);
					-moz-user-select: none;
					-ms-user-select: none;
					-webkit-user-select: none;
					user-select: none;
				}

				> tbody > tr > td.empty {
					opacity: 0;
					pointer-events: none;
					border: map-gets($vars, day, empty, border, width) map-gets($vars, day, empty, border, style) map-gets($vars, day, empty, border, color);
				}

				> tbody > tr > td:not(.empty) {
					cursor: pointer;
					border: map-gets($vars, day, default, border, width) map-gets($vars, day, default, border, style) map-gets($vars, day, default, border, color);

					color: map-gets($vars, day, default, color);
					background-color: map-gets($vars, day, default, background-color);

					&:hover {
						color: map-gets($vars, day, default, hover, color);
						background-color: map-gets($vars, day, default, hover, background-color);
					}

					&.in-between {
						color: map-gets($vars, day, in-between, color);
						background-color: map-gets($vars, day, in-between, background-color);
						border: map-gets($vars, day, in-between, border, width) map-gets($vars, day, in-between, border, style) map-gets($vars, day, in-between, border, color);

						&:hover {
							color: map-gets($vars, day, in-between, hover, color);
							background-color: map-gets($vars, day, in-between, hover, background-color);
						}
					}

					&.selected, &.start, &.end {
						z-index: 2;
						color: map-gets($vars, day, selected, color);
						background-color: map-gets($vars, day, selected, background-color);
						border: map-gets($vars, day, selected, border, width) map-gets($vars, day, selected, border, style) map-gets($vars, day, selected, border, color);

						&:hover {
							color: map-gets($vars, day, selected, hover, color);
							background-color: map-gets($vars, day, selected, hover, background-color);
						}
					}
					&.disabled, &[disabled="disabled"] {
						opacity: map-gets($vars, day, disabled, opacity);
						pointer-events: none;
						// border: map-gets($vars, day, disabled, border, width) map-gets($vars, day, disabled, border, style) map-gets($vars, day, disabled, border, color);
						// color: map-gets($vars, day, disabled, color);
						// background-color: map-gets($vars, day, disabled, background-color);
					}
				}
			}

			> footer {
				text-align: left;
				padding: 1em 0;

				ul { list-style: none; margin: 0; padding: 0; }
				li { margin: 0; padding: 0; }

				li.group {

				}
				li.shortcut {
					display: inline-block;
				}
			}
		}

		luid-daterange-picker .popover-content,
		luid-date-picker-popup .popover-content {
			> footer {
				background-color: map-gets($vars, popup, footer, background);
				margin: 0.5em -1em -1em -1em;
				padding: 0.5em 1em;
				border-top: 1px solid luiTheme(element, divider, color);
			}
		}

		luid-daterange-picker {
			> .lui.input > .tags {
				display: block;
				width: 100%;
				text-align: center;

				user-select: none;
				-moz-user-select: none;
				-webkit-user-select: none;
				-ms-user-select: none;

				.arrow.icon {
					font-size: 0.5em;
					margin: 0 1em;
				}
			}
		}

		luid-daterange-picker,
		luid-date-picker-popup[displayed-months="2"] {
			.popover-inner { width: 40em; }
		}
	}
}
