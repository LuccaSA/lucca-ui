// ===================================
// ============= Mixins ==============
// ===================================

// Coloring support
// ===================================

@mixin lui_input_coloring($scheme) {
	&[class*="with addon"] > .addon {
		background-color: map-get($scheme, color);
		border-color: map-get($scheme, color);
		color: map-get($scheme, text);
		@if luiIsLod($scheme) { text-shadow: 0 1px 1px darken(map-get($scheme, color), 15); }
	}
}
#{$prefix}.input {
	@each $name, $scheme in luiPalettes() {
		&.#{map-get($scheme, class)} {
			@include lui_input_coloring($scheme);
		}
	}
}

@mixin lui_placeholder() {
	&::-webkit-input-placeholder,
	&::-moz-placeholder,
	&:-ms-input-placeholder {
		@content;
	}
}


// ===================================
// ============ Elements =============
// ===================================

@if map-get($vars, enabled) {

	// General properties
	// ===================================

	%lui_input_holder_base {
		position: relative;
		display: inline-block;
		vertical-align: middle;
		@include display-flex(true);
		@include flex-align-items(center);

		// IE fix
		@include lui_target_IE9 { overflow: hidden; }
	}
	%lui_input_field_base {
		width: 100%;
		border-radius: map-gets($vars, borderRadius);
		border: 1px solid map-gets($vars, borderColor);
		background: map-gets($vars, background);
		color: map-gets($vars, color);
		font-weight: normal;

		&:focus, &:active {
			outline: 0; outline: none;
			border-color: map-gets($vars, focusBorderColor);
		}
		@include lui_placeholder() {
			color: map-gets($vars, placeholderColor);
			font-style: map-gets($vars, placeholderStyle);
		}
	}
	%lui_input_text_field {
		padding: 0  map-gets($vars, padding, right) 0  map-gets($vars, padding, left);
		line-height: (1em + map-gets($vars, padding, top) + map-gets($vars, padding, bottom));

		// Fix for Internet Explorer
		min-height: (1em + map-gets($vars, padding, top) + map-gets($vars, padding, bottom));
		display: inline-block;
		@include flex();

		box-sizing: border-box;
		width: 100%;

		@include lui_target_IE9 { width: auto; }
	}

	#{$prefix}.input {
		@extend %lui_input_holder_base;
		> input,
		> textarea,
		> select {
			@extend %lui_input_field_base;
		}

		> input[type="checkbox"] {
			width: auto;
		}
	}

	// Text inputs
	#{$prefix}.input > input {
		@extend %lui_input_text_field;
	}
	#{$prefix}.input > input, #{$prefix}.input > textarea { cursor: text; }
	#{$prefix}.input > input[type="checkbox"] { cursor: pointer; }
	#{$prefix}.input > textarea {
		padding: map-gets($vars, padding, top) map-gets($vars, padding, right) map-gets($vars, padding, bottom) map-gets($vars, padding, left);
	}
	#{$prefix}.input > select {
		padding: (map-gets($vars, padding, top) / 2) map-gets($vars, padding, right) (map-gets($vars, padding, bottom) / 2) map-gets($vars, padding, left);
	}

	// Fitting size
	#{$prefix}.fitting.input { width: 100%; }

	// Inputs length (horizontal sizing)
	@each $sizeName, $sizeEms in map-gets($vars, lengths) {
		#{$prefix}.#{$sizeName}.input > input,
		#{$prefix}.#{$sizeName}.field > input { min-width: 0; width: $sizeEms !important; }
	}


	// Icon
	// ===================================

	#{$prefix}.input.icon {
		> input { padding-left: 2.5em; }

		#{$prefix}.icon {
			position: absolute;
			z-index: 2;
			top: 0; bottom: 0;
			height: 100%;
			left: 0;
			width: 2.5em;
			margin-right: 0.5em;
			&:before {
				position: absolute;
				top: 50%; left: 0; right: 0;
				-ms-transform: translate(0, -50%);
				transform: translate(0, -50%);
			}
		}
		&[class*="left icon"] {
			> input {
				padding-left: 0;
				padding-right: 2.5em;
			}
			#{$prefix}.icon {
				left: auto; right: 0;
				margin-right: 0;
				margin-left: 0.5em;
			}
		}
	}


	// Addon
	// ===================================

	#{$prefix}.input[class*="with addon"] {
		> .addon {
			display: inline-block;
			position: relative; z-index: 2;
			vertical-align: middle;
			border: 1px solid map-gets($vars, borderColor);
			padding: 0 map-gets($vars, padding, right) 0 map-gets($vars, padding, left);
			background: map-gets($vars, background);
			line-height: 1 +  map-gets($vars, padding, top) +  map-gets($vars, padding, bottom);
			height: 1 +  map-gets($vars, padding, top) +  map-gets($vars, padding, bottom);
			box-sizing: border-box;
		}

		&:not(.addons) > #{$prefix}.addon:not([class*="right addon"]),
		&.addons > #{$prefix}.addon:first-child {
			border-right: none;
			border-radius: map-gets($vars, borderRadius) 0 0 map-gets($vars, borderRadius);
			& + input { border-radius: 0 map-gets($vars, borderRadius) map-gets($vars, borderRadius) 0; }
		}

		&:not(.addons) > #{$prefix}[class*="right addon"],
		&.addons #{$prefix}.addon:last-child {
			border-radius: 0 (map-gets($vars, borderRadius)) (map-gets($vars, borderRadius)) 0;
			margin-left: -(map-gets($vars, borderRadius));
		}

		&.addons > input {
			border-radius: 0 !important;
		}
	}

	// Button addon
	#{$prefix}.input[class*="with addon"] .addon.button {
		border: 0; margin: 0;
		min-width: inherit;
		&:not(.right) {
			border-top-right-radius: 0;
			border-bottom-right-radius: 0;
		}
		&.right {
			border-top-left-radius: 0;
			border-bottom-left-radius: 0;
		}
	}


	// Field
	// ===================================

	#{$prefix}.field,
	#{$prefix}.fields {
		margin: 0.5em 0;
	}
	#{$prefix}.field {
		vertical-align: middle;
		@include display-flex(true);
		@include flex-direction(column);
		@include flex-align-items(flex-start);

		> .input { width: 100%; }

		> label + .input,
		> .input  + label {
			margin-top: 0.25em;
		}

		// Fitting: takes the whole available horizontal space
		&.fitting {
			width: 100%;
			@include display-flex();
			display: flex !important;
		}

		// Label styling
		// ====
		> label {
			white-space: pre;
			font-weight: map-gets($vars, field, labelFontWeight);
		}

		> label, > .input {
			display: block;
		}

		// invalid
		// ====
		&.invalid {
			> label {
				color: map-gets($vars, invalidColor);
			}
			> .input {
				&,
				> input,
				> select,
				> textarea { @extend %lui_invalid_input_base; }
			}
		}
	}
	#{$prefix}.fields {
		@extend %lui_clearfix;

		.field:not(:last-of-type) {
			padding-right: 1em;
		}

		@include lui_screens_smaller_than(tablet) {
			> .field {
				width: 100% !important;
				padding-right: 0 !important;
			}
		}
	}

	#{$prefix}.inline.field,
	#{$prefix}.inline.fields > .field {
		@include flex-direction(row);
		@include flex-align-items(center);

		> label + .input,
		> .input  + label {
			margin-left: 0.5em;
		}
	}


	// Sizing support
	// ===================================

	#{$prefix}.input {
		@include lui_supports_sizing();
	}


	// Validation
	// ===================================

	%lui_invalid_input_base {
		color: map-gets($vars, invalidColor);
		border-color: map-gets($vars, invalidColor);
	}
	#{$prefix}.input.invalid,
	#{$prefix}.input.ng-invalid {
		&,
		> input,
		> select,
		> textarea { @extend %lui_invalid_input_base; }
	}

	@import "input.search";
	@import "input.switch";
	@import "input.checkbox";
	//
	@import "input.timespanpicker";
	@import "input.momentpicker";
	@import "input.translations";
}
