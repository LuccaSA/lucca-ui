
// Maps helpers
// ===================================

@function result($map, $keys...) {
	@each $key in $keys {
		@if map-has-key($map, $key) {
			$map: map-get($map, $key);
		} @else {
			@warn "Map #{$map} does not have a #{$key} key!";
			@return null;
		}
	}
	@return $map;
}

// Lodash _.result(object, path, default) equivalent
@function result($map, $path, $default: null) {
	$map: result($map, $path...);
	@if $map {
		@return $map;
	} @else {
		@return $default;
	}
}

@function map-extend($map, $maps.../*, $deep */) {
	$last: nth($maps, -1);
	$deep: $last == true;
	$max: if($deep, length($maps) - 1, length($maps));

	// Loop through all maps in $maps...
	@for $i from 1 through $max {
		// Store current map
		$current: nth($maps, $i);

		// If not in deep mode, simply merge current map with map
		@if not $deep {
			$map: map-merge($map, $current);
		} @else {
			// If in deep mode, loop through all tuples in current map
			@each $key, $value in $current {

				// If value is a nested map and same key from map is a nested map as well
				@if type-of($value) == "map" and type-of(map-get($map, $key)) == "map" {
					// Recursive extend
					$value: map-extend(map-get($map, $key), $value, true);
				}

				// Merge current tuple with map
				$map: map-merge($map, ($key: $value));
			}
		}
	}
	@return $map;
}
