// Helpers
// ===================================

@import "palette";



$luiTheme: () !default;

// Get / set theming variables
// ===================================

@function luiSetTheme($type, $name, $map, $inherit: true) {
	@if length($map) > 0 and $inherit {
		$luiTheme: map-extend($luiTheme, ("#{$type}s": ($name: $map)), true);
		$luiTheme: $luiTheme !global; // Make it globally known
	} @else if length($map) > 0 {
		$luiTheme: map-extend($luiTheme, ("#{$type}s": ($name: $map)));
		$luiTheme: $luiTheme !global; // Make it globally known
	}
	@return $luiTheme;
}

@function luiTheme($type, $keys...) {
	@if  (map-has-key($luiTheme, "#{$type}s")) {
		@return map-gets($luiTheme, "#{$type}s", $keys);
	} @else {
		@warn "#{$type} component type is unknown!";
	}

}


// Shortcuts
// ===================================

@function lui_theme_shadow() {
	$vars: luiTheme(adjective, raised);
	@return unquote("#{map-get($vars, x)} #{map-get($vars, y)} #{map-get($vars, blur)} #{map-get($vars, spread)} #{map-get($vars, color)}");
}

// Get root unit size
// ===================================

@function lui_rem($number: 1) {
	// Remove $number unit if specified and multiply it by bodyFontSize
	@return (($number / ($number * 0 + 1)) * map-gets($luiTheme, elements, typography, body, fontSize));
}


// Load core defaults
// @import "core/theming/defaults.values";
@at-root {
	@import "theme.defaults";
}
