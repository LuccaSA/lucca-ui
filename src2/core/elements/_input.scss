
@import "core/elements/input.search";
@import "core/elements/input.switch";
@import "core/elements/input.checkbox";
//
@import "core/elements/input.timespanpicker";
@import "core/elements/input.momentpicker";

@mixin lui_placeholder() {
	&::-webkit-input-placeholder,
	&::-moz-placeholder,
	&:-ms-input-placeholder {
		@content;
	}
}


// General properties
// ===================================

%lui_input_holder_base {
	position: relative;
	display: inline-block;
	vertical-align: middle;
	@include display-flex(true);
	@include flex-align-items(center);

	// IE fix
	@include lui_target_IE9 { overflow: hidden; }
}
%lui_input_field_base {
	width: 100%;
	border-radius: $border-radius;
	border: 1px solid $border-color;
	background: $bg;
	color: $color;

	&:focus, &:active {
		outline: 0; outline: none;
		border-color: $focus-border-color;
	}
	@include lui_placeholder() {
		color: $placeholder-color;
		font-style: $placeholder-style;
	}
}
%lui_input_text_field {
	padding: 0 $h-padding;
	line-height: (1em + 2 * $v-padding);
	height: 1 + 2 * $v-padding; // For any version of IE...

	// Fix for Internet Explorer
	height: (1em + 2 * $v-padding);
	display: inline-block;
	@include flex();

	box-sizing: border-box;
	width: 100%;

	@include lui_target_IE9 { width: auto; }
}

#{$prefix}.input {
	@extend %lui_input_holder_base;
	> input,
	> textarea,
	> select {
		@extend %lui_input_field_base;
	}
}

// Text inputs
#{$prefix}.input > input {
	@extend %lui_input_text_field;
}
#{$prefix}.input > input, #{$prefix}.input > textarea { cursor: text; }
#{$prefix}.input > input[type="checkbox"] { cursor: pointer; }
#{$prefix}.input > select, #{$prefix}.input > textarea { padding: $v-padding $h-padding; }

// Fitting size
#{$prefix}.fitting.input { width: 100%; }

// Inputs length (horizontal sizing)
#{$prefix}.input.short > input, #{$prefix}.field.short > input { min-width: 0; width: 8em !important; }
#{$prefix}.input.medium > input, #{$prefix}.field.medium > input { min-width: 0; width: 15em !important; }
#{$prefix}.input.long > input, #{$prefix}.field.long > input { min-width: 0; width: 20em !important; }
#{$prefix}.input.x-long > input, #{$prefix}.field.x-long > input { min-width: 0; width: 25em !important; }


// Icon
// ===================================

#{$prefix}.input.icon {
	> input { padding-left: 2.5em; }

	#{$prefix}.icon {
		position: absolute;
		z-index: 2;
		top: 0; bottom: 0;
		height: 100%;
		left: 0;
		width: 2.5em;
		margin-right: 0.5em;
		&:before {
			position: absolute;
			top: 50%; left: 0; right: 0;
			-ms-transform: translate(0, -50%);
			transform: translate(0, -50%);
		}
	}
	&[class*="left icon"] {
		> input {
			padding-left: 0;
			padding-right: 2.5em;
		}
		#{$prefix}.icon {
			left: auto; right: 0;
			margin-right: 0;
			margin-left: 0.5em;
		}
	}
}


// Addon
// ===================================

#{$prefix}.input[class*="with addon"],
#{$prefix}.input[class*="with addons"] {
	> .addon {
		display: inline-block;
		position: relative; z-index: 2;
		vertical-align: middle;
		border: 1px solid $border-color;
		padding: 0 $h-padding;
		background: $bg;
		line-height: 1 + 2 * $v-padding;
		height: 1 + 2 * $v-padding;
		box-sizing: border-box;
	}

	&:not(.addons) > #{$prefix}.addon:not([class*="right addon"]),
	&.addons > #{$prefix}.addon:first-child {
		border-right: none;
		border-radius: $border-radius 0 0 $border-radius;
		& + input { border-radius: 0 $border-radius $border-radius 0; }
	}

	&:not(.addons) > #{$prefix}[class*="right addon"],
	&.addons #{$prefix}.addon:last-child {
		border-radius: 0 $border-radius $border-radius 0;
		margin-left: -$border-radius;
	}

	&.addons > input {
		border-radius: 0 !important;
	}

	// Old browsers
	@include lui_target_IE9 {
		// display: inline-table;
		// > input, > .addon { display: table-cell; }
	}
}


// Coloring support
// ===================================

@mixin lui_input_coloring($scheme) {
	&[class*="with addon"] > .addon {
		background-color: map-get($scheme, color);
		border-color: map-get($scheme, color);
		color: map-get($scheme, text);
		@if map-get($scheme, lod) { text-shadow: 0 1px 1px darken(map-get($scheme, color), 15); }
	}
}
#{$prefix}.input {
	@each $name, $scheme in $lui_colors {
		&.#{map-get($scheme, class)} {
			@include lui_input_coloring($scheme);
		}
	}
}


// Form and fields
// ===================================

// #{$prefix}.input { // Automatic inputs styling
// 	margin: $field-v-margin 0;
// 	&:not(.inline) {
// 		@include flex-direction(column);
// 		@include flex-align-items(flex-start);
//
// 		> label, > input { display: block; }
// 	}
//
// 	> input[type="checkbox"] { width: auto; }
// 	input[type="checkbox"] + label { margin-left: 0.5em; }
//
// 	> label { font-weight: $field-label-font-weight; }
// }



// Sizing support
// ===================================

#{$prefix}.input {
	@include lui_supports_sizing();
}


// Validation
// ===================================

%lui_invalid_input_base {
	color: $invalid-color;
	border-color: $invalid-color;
}
#{$prefix}.input.invalid,
#{$prefix}.input.ng-invalid {
	&,
	> input,
	> select,
	> textarea { @extend %lui_invalid_input_base; }
}
