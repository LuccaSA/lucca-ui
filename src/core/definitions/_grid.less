/**
 * Grid
 * --------------------------------------------------------------------------- */

body, html {
    width: 100%; height: 100%;
}

/**
 * Elements
 * --------------------------------------------------------------------------- */

.lui.container {
    padding: 0;
    width: @container-width;

}
.lui.container .lui.column, {
    float: left;
    box-sizing: border-box;
    width: 100%;
}

// Bootstrap '.row' equivalent
.lui.container .lui.columns { .clear(); }


/**
 * Styles
 * --------------------------------------------------------------------------- */

// Fitting container
// Takes up the whole available width
// ====
.lui.fitting.container { margin-left: 0; margin-right: 0; }

// Spaced container
// Adds gutter
// =====
.lui.container.spaced .lui.column,
.lui.container .lui.column.spaced { padding: 0 @gutter; }

.lui.container.spaced .columns { margin: 0 -@gutter; }


/**
 * Loop through breakpoints
 * --------------------------------------------------------------------------- */

.loop_breakpoints(@i) when (@i > 0) {
    @breakpoint: extract(extract(@lui_breakpoints, @i), 1);
    @breakAt: extract(extract(@lui_breakpoints, @i), 2);
    @spacing: extract(extract(@lui_breakpoints, @i), 3);

    & when (@i = length(@lui_breakpoints)) {
        // Container
        .lui.container { margin: 0  @spacing; }
        // Hide / Show
        .@{breakpoint}-hide { display: none !important; }
        .@{breakpoint}-show { display: block !important; }

        // This is the lowest value > mobile/smaller first
        .lui_loop_columns(@columns, @breakpoint, @spacing);
    }
    & when not(@i = @lui_breakpoints) {
        @media (min-width: @breakAt) {
            // Container
            .lui.container { margin: 0  @spacing; }
            // Hide / Show
            .@{breakpoint}-hide { display: none !important; }
            .@{breakpoint}-show { display: block !important; }

            .lui_loop_columns(@columns, @breakpoint, @spacing);
        }
    }

    .loop_breakpoints((@i - 1));
}
.loop_breakpoints(length(@lui_breakpoints));


/**
 * Define classes for each breakpoint
 * --------------------------------------------------------------------------- */

.lui_loop_columns(@j, @breakpoint, @spacing) when (@j > -1) {
    // Column
    .lui.container .lui.column.@{breakpoint}-@{j} { width: @column * @j; }
    // Offset
    .lui.container .lui.column.@{breakpoint}-offset-@{j} { margin-left: @column * @j; }
    // Reordering: Pulling
    .lui.container .lui.column.@{breakpoint}-pull-@{j} { position: relative; left: -@column * @j; }
    // Reordering: Pushing
    .lui.container .lui.column.@{breakpoint}-push-@{j} { position: relative; left: @column * @j; }


    .lui_loop_columns((@j - 1), @breakpoint, @spacing);
}
