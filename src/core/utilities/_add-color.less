.lui_add_color(@name, @color, @text, @lightOnDark: false) {

    .lui.label.@{name} {
        .lui_label_coloring_handler(@color, @text, @lightOnDark);
    }

    .lui.menu.@{name} {
        .lui_menu_coloring_handler(@color, @text);
    }

    .lui.popover.@{name} {
        .lui_popover_coloring_handler(@color, @text, @lightOnDark);
    }

    .lui.table .tr.@{name} .th:first-child,
    .lui.table .tr.@{name} .td:first-child,
    .lui.table tr.@{name} th:first-child,
    .lui.table tr.@{name} td:first-child {
        .lui_table_coloring_handler(@color, @text, @lightOnDark);
    }

    .lui.nguibs-tooltip.@{name} {
        .lui_nguibs_tooltip_coloring_handler(@color, @text, @lightOnDark);
    }
}


/**
 * Button color
 * --------------------------------------------------------------------------- */

.lui_button_coloring_handler(@color, @text, @lightOnDark: false) {
    // Regular style
    // =====
    &:not(.filling):not(.wired):not(.inverted):not(.flat) {
        background: @color;
        color: @text;
        &:hover {
            background: lighten(@color, 3);
        }
        &:active, &.active {
            background: darken(@color, 3);
        }
        & when (@lightOnDark = true) {
            &.status.loading:not(.has):not(.addon),
            &.status.loading.has.addon > .addon {
                .lui_loader_handle_color(@lightOnDark);
            }
        }
        & when (@lightOnDark = true) {
            text-shadow: 0 1px 1px darken(@color, 5);
        }
    }

    // filling style
    // =====
    &.filling {
        &:hover {
            background: @color;
            color: @text;
            & when (@lightOnDark = true) {
                text-shadow: 0 1px 1px darken(@color, 15);
            }
        }
        &:active, &.active {
            background: darken(@color, 5);
        }
    }

    // Wired style
    // Wired + Inverted is not supported
    // =====
    &.wired:not(.inverted) {
        // Regular
        &:hover,
        &:active,
        &.active, {
            box-shadow: 0 0 0 2px @color inset;
            color: @color;

            &.has-addon > .addon {
                border-color: @color;
            }
        }
    }

    // Inverted style
    // ====
    &.inverted {
        box-shadow: 0 0 0 1px rgba(255, 255, 255, 0.5) inset;
        color: #FFF;

        &:hover {
            box-shadow: 0 0 0 2px @color inset;
            color:@color;
        }

        &.filling {
            box-shadow: 0 0 0 1px @color inset;
            color: @color;

            &:hover {
                color: @text;
            }

            &.has-addon > .addon {
                background: transparent;
            }
            &.has-addon:not(:hover):not(.active) > .addon {
                border-color: @color;
            }
        }
    }

    // Status icon
    // ====
    &.status.ok:after, &.status.failure:after {
        color: @text;
    }
}

/**
 * Label
 * --------------------------------------------------------------------------- */
.lui_label_coloring_handler(@color, @text, @lightOnDark) {
    background: @color;

    color: @text;
    & when (@lightOnDark = true) {
        text-shadow: 1px 0 1px darken(@color, 5);
    }
}


/**
 * Menu
 * --------------------------------------------------------------------------- */
.lui_menu_coloring_handler(@color, @text) {
    &.dividing a.item:before, &.dividing a.item:after {
        background-color: @color;
    }
    &.pills .item:active, &.pills .item.active {
        background-color: @color;
        color: @text;
    }
    &.pills .item:hover {
        background-color: hsla(hue(@color), saturation(@color), lightness(@color), 0.5);
        color: @text;
    }
}


/**
 * Side border coloring
 * --------------------------------------------------------------------------- */
 .lui_side_border_coloring_handler(@color) {
     &:after {
         background: @color;
     }
 }


/**
 * Callout color
 * --------------------------------------------------------------------------- */

.lui_callout_coloring_handler(@color, @text, @lightOnDark: false) {
    // Regular style
    // =====
    &:not(.filled) {
        &:after {
            background: @color;
        }
    }

    // Filled style
    // =====
    &.filled {
        background-color: @color;
        border-color: darken(@color, 5);
        &, &:before, a, button {
            color: @text;
        }

        & when (@lightOnDark = true) {
            text-shadow: 0 1px 1px darken(@color, 15);
        }

        > .footer {
            background-color: darken(@color, 3);
        }
    }
}
.lui_side_border_coloring_handler(@color) {
    &:after {
        background: @color;
    }
}


/**
 * Popover color
 * --------------------------------------------------------------------------- */

.lui_popover_coloring_handler(@color, @text, @lightOnDark: false) {
    background-color: @color;
    color: @text;
    border: none;
    &.bottom:before {
        border-bottom-color: @color;
    }
    &.top:before {
        border-top-color: @color;
    }
    &.left:before {
        border-left-color: @color;
    }
    &.right:before {
        border-right-color: @color;
    }
}

.lui_table_coloring_handler(@color, @text, @lightOnDark: false) {
    display: table-cell;
    position: relative;
    box-sizing: border-box;
    &:after {
        visibility: visible !important; // neutralise possible clearfix
        position: absolute;
        z-index: 2;
        display: block;
        content: "";
        top: 0; left: -1px;
        width: 5px;
        background: @color;
        min-height: 100%;
    }
}

.lui_nguibs_tooltip_coloring_handler(@color, @text, @lightOnDark: false) {
    .tooltip-inner {
        background-color: @color;
        color: @text;
        & when (@lightOnDark = true) {
            text-shadow: 1px 0 1px darken(@color, 5);
        }
    }
    &.left .tooltip-arrow { border-left-color: @color; }
    &.top .tooltip-arrow { border-top-color: @color; }
    &.right .tooltip-arrow { border-right-color: @color; }
    &.bottom .tooltip-arrow { border-bottom-color: @color; }
}
