
/**
 * Button
 * --------------------------------------------------------------------------- */

.lui_button_sizing() {
	display: inline-block;
	vertical-align: middle;
	box-sizing: border-box;

	min-height: @min-height;
	min-width: @min-width;
	padding: @v-padding @h-padding;
	margin: @v-margin @h-margin;
}

.lui.button {
	cursor: pointer;
	outline: none;
	border: none;
	text-decoration: none;
	font-style: normal;
	line-height: 1em;
	.user_select_none;

	.lui_button_sizing();

	white-space: nowrap;
	font-weight: normal;
	text-transform: @text-transform;
	text-shadow: @text-shadow;
	text-align: center;

	box-shadow: @default-border;

	.lui_border_radius(@border-radius);

	.lui_transition_properties(background, box-shadow, color);
}

.lui.button.bold {
	font-weight: 600;
}


/**
 * Button states
 * --------------------------------------------------------------------------- */

.lui.button:hover {
	.lui_drop_shadow(0px, 1px, 2px, 0, rgba(50, 50, 50, 0.25));
}
.lui.button:active, .lui.button.active {
	.lui_no_shadows();
}
.lui.button.disabled {
	opacity: 0.75;
	cursor: normal;
	pointer-events: none;
}


/**
 * Button styles
 * --------------------------------------------------------------------------- */

.lui.button:not(.wired) {
	&:hover {
		box-shadow: @default-border, 0px 1px 2px 0 rgba(0, 0, 0, 0.2);
	}
	&:active, &.active {
		box-shadow: @default-border;
	}
}


// Filling style
// =====
.lui.button.filling {
	&:not(.inverted) {
		background: #FFF;
	}
}

// Inverted
// =====
.lui.button.inverted {
	background: transparent;
	color: rgba(255, 255, 255, 0.5);
	&:hover, &:active, &.active {
		color: #FFF;

		box-shadow: 0 0 0 2px #FFF;
	}
}

// Wired style
// =====
.lui.button.wired {
	background: transparent;
	&.has-addon {
		> .addon {
			background-color: transparent;
		}
		&:hover > .addon {
			border-width: 2px;
		}
	}
}

// Fake button style
// Only applies button sizing properties to given object
// =====
.lui.fake-button {
	.lui_button_sizing();
}

// Flat style
// =====
.lui.button.flat {
	background-color: transparent;
	color: @default-color;
	text-decoration: underline;
	box-shadow: none;

	&:hover, &:active, &.active {
		background: rgba(0, 0, 0, 0.1);
		box-shadow: 0 0 0 1px rgba(50, 50, 50, .1);
	}

	&:hover {
		background-color: rgba(50, 50, 50, .05);
	}

	&:active {
		background-color: rgba(50, 50, 50, 0.1);
	}

	&:before, &:after {
		text-decoration: none;
	}

	&:inverted {
		color: #FFF;
	}

	&.icon {
		text-decoration: none;
	}
}


/**
 * Coloring support
 * --------------------------------------------------------------------------- */

// Coloring ruleset
// ====
@coloring-ruleset: {
	// Regular style
	// =====
	&:not(.filling):not(.wired):not(.inverted):not(.flat) {
		background: @coloring-color;
		color: @coloring-text;
		&:hover {
			background: lighten(@coloring-color, 3);
		}
		&:active, &.active {
			background: darken(@coloring-color, 3);
		}
		& when (@coloring-lightOnDark = true) {
			// removed after issue 10 - https://github.com/LuccaSA/lucca-ui/issues/10
			// text-shadow: 0 1px 1px darken(@coloring-color, 5);
		}
	}

	// filling style
	// =====
	&.filling {
		&:hover {
			background: @coloring-color;
			color: @coloring-text;
			& when (@coloring-lightOnDark = true) {
				text-shadow: 0 1px 1px darken(@coloring-color, 15);
			}
		}
		&:active, &.active {
			background: darken(@coloring-color, 5);
		}
	}

	// Wired style
	// Wired + Inverted is not supported
	// =====
	&.wired:not(.inverted) {
		// Regular
		&:hover,
		&:active,
		&.active, {
			box-shadow: 0 0 0 2px @coloring-color inset;
			color: @coloring-color;

			&.has-addon > .addon {
				border-color: @coloring-color;
			}
		}
	}

	// Inverted style
	// ====
	&.inverted {
		box-shadow: 0 0 0 1px rgba(255, 255, 255, 0.5) inset;
		color: #FFF;

		&:hover {
			box-shadow: 0 0 0 2px @coloring-color inset;
			color:@coloring-color;
		}

		&.filling {
			box-shadow: 0 0 0 1px @coloring-color inset;
			color: @coloring-color;

			&:hover {
				color: @coloring-text;
			}

			&.has-addon > .addon {
				background: transparent;
			}
			&.has-addon:not(:hover):not(.active) > .addon {
				border-color: @coloring-color;
			}
		}
	}

	// Status icon
	// ====
	// Regular button style
	&.status:not(.filling):not(.wired):not(.inverted):not(.flat),
	&.status.filling:hover {
		// Transparent text if icon is shown over button text
		&:not(.has-addon) { color: transparent; }
		// Colored icons
		&.ok:after, &.failure:after { color: @coloring-text; }
		// Loader color depends on @lightOnDark
		&.loading:not(.has-addon),
		&.loading.has-addon > .addon {
			& when (@coloring-lightOnDark = true) {
				&:before { border-color: rgba(255, 255, 255, 0.25); }
				&:after { border-color: rgba(255, 255, 255, 0.75) transparent transparent transparent; }
			}
			& when (@coloring-lightOnDark = false) {
				&:before { border-color: rgba(0, 0, 0, 0.25); }
				&:after { border-color: rgba(0, 0, 0, 0.5) transparent transparent transparent; }
			}
		}
	}
};

// Default coloring
// ====
.lui.button {
	 @coloring-color: @default-background;
	 @coloring-text: @default-color;
	@coloring-lightOnDark: false;

	 @coloring-ruleset();
}

// Custom colors support
// ====
.lui.button {
	 // Define ruleset to be used
	 .lui_supports_coloring(@coloring-ruleset);
}


/**
 * Button groups
 * --------------------------------------------------------------------------- */

.lui.buttons {
	display: inline-block;
	vertical-align: middle;
	margin: @v-margin 0;

	& + .buttons {
		margin-left: 1em;
	}

	> .button {
		float: left;
		margin-top: 0; margin-bottom: 0;
		margin-left: -1px; margin-right: 0;
		&.wired:hover {
			position: relative;
			z-index: 2;
		}
		.lui_border_radius(0);
		&:first-child {
			.lui_border_radius(@border-radius, 0, 0, @border-radius);
		}
		&:last-child {
			.lui_border_radius(0, @border-radius, @border-radius, 0);
		}
	}

	// Buttons inception support
	// ====
	> .buttons {
		margin: 0;
	}

	// Modern browsers: flex-box model
	.display-flex(true);

	// Alignment
	// ====
	&.right-aligned {
		text-align: right;
	}
	&.justify-aligned {
		text-align: justify;
	}
	&.left-aligned {
		text-align: left;
	}
}

// No border-radius
// ====
.lui.button.squared,
.lui.buttons.squared > .button {
	.lui_border_radius(0);
}


// Fitted buttons
// =====
.lui.buttons.justified {
	width: 100%;
	display: table;
	table-layout: fixed;

	> .button {
		display: table-cell;
		text-align: center;
		float: none;
	}

	// Modern browsers: flex-box model
	.display-flex();

	> .button {
		float: none;
		.flex(1);
	}
}


/**
 * Icon support
 * --------------------------------------------------------------------------- */
 .lui.button.icon:before {
	 display: inline-block;
	 vertical-align: middle;
 }
.lui.button .lui.icon {
	margin-right: 0.5em;
	&.right {
		margin-left: 0.5em; margin-right: 0;
	}
}


/**
 * Icon addon
 * --------------------------------------------------------------------------- */

.lui.button.has-addon {
	position: relative;
	> .addon {
		position: absolute;
		z-index: 1;
		top: 0; bottom: 0;
		width: 2.5em;
		height: 100%;
		margin: 0;

		background: rgba(0, 0, 0, 0.1);

		&.icon:before {
			position: absolute;
			top: 50%; left: 50%;
			margin-top: -0.5em; margin-left: -0.5em;
		}
		.lui_transition(border);
	}

	&:not(.right) {
		padding-left: 3.5em;
		> .addon {
			left: 0;
			border-right: 1px solid rgba(0, 0, 0, 0.2);
		}
	}

	&.right {
		padding-right: 3.5em;
		> .addon {
			right: 0;
			border-left: 1px solid rgba(0, 0, 0, 0.2);
		}
	}
}


/**
 * Loading support
 * Status support
 * --------------------------------------------------------------------------- */

.lui.button.status {
	position: relative;
}

// Has addon > update the addon icon
// ====
.lui.button.status.has-addon {
	&.loading > .addon {
		.lui_loader();
		position: absolute;
	}

	&.ok > .addon:before {
		content: "\e00b";
	}

	&.failure > .addon:before {
		content: "\e01e";
	}
}

// Else
// ====
.lui.button.status:not(.has-addon) {
	color: transparent;

	&:not(.icon):before, &:after {
		position: absolute;
		top: 50%; left: 50%;
		-ms-transform: translate(-50%, -150%);
		transform: translate(-50%, -150%);
	}

	// loading
	// ====
	&.loading {
		.lui_loader();
	}
	// Status: OK
	// ====
	&.ok {
		.lui_make_icon(check, right);
	}
	// Status: failure
	// ====
	&.failure {
		.lui_make_icon(forbidden, right);
	}
	// Transition
	// ====
	&.loading:after, &.loading:not(.icon):before,
	&.ok:after, &.failure:after {
		-ms-transform: translate(-50%, -50%);
		transform: translate(-50%, -50%);
	}

	// Status
	// ====
	&.status.loading, &.status.ok, &.status.failure {
		color: transparent;
	}
	&.status.ok:after, &.status.failure:after {
		margin: 0;
	}
}

/**
 * Sizing support
 * --------------------------------------------------------------------------- */

.lui.button {
	 .lui_supports_sizing({
		 font-size: @sizeEms;
	 });
}
.lui.buttons {
	.lui_supports_sizing({
		> .lui.button {
			font-size: @sizeEms;
		}
	});
}


// Buttons inside a heading
// =====
h1 .lui.button,
h2 .lui.button,
h3 .lui.button,
h4 .lui.button,
h5 .lui.button,
h6 .lui.button {
	vertical-align: middle;
	margin: 0 0.5em;
}
