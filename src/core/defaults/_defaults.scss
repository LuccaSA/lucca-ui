@function map-gets($map, $keys...) {
	@each $key in $keys {
		$map: map-get($map, $key);
	}

	@return $map;
}

/// jQuery-style extend function
/// @param {Map} $map - first map
/// @param {ArgList} $maps - other maps
/// @param {Bool} $deep - recursive mode
/// @return {Map}
// Credits: http://www.sitepoint.com/extra-map-functions-sass/
@function map-extend($map, $maps.../*, $deep */) {
	$last: nth($maps, -1);
	$deep: $last == true;
	$max: if($deep, length($maps) - 1, length($maps));

	// Loop through all maps in $maps...
	@for $i from 1 through $max {
		// Store current map
		$current: nth($maps, $i);

		// If not in deep mode, simply merge current map with map
		@if not $deep {
			$map: map-merge($map, $current);
		} @else {
			// If in deep mode, loop through all tuples in current map
			@each $key, $value in $current {

				// If value is a nested map and same key from map is a nested map as well
				@if type-of($value) == "map" and type-of(map-get($map, $key)) == "map" {
					// Recursive extend
					$value: map-extend(map-get($map, $key), $value, true);
				}

				// Merge current tuple with map
				$map: map-merge($map, ($key: $value));
			}
		}
	}
	@return $map;
}


// Retrieves theming variables
// ===================================

@function lui_get_component_vars($type, $name) {

	@if  (map-has-key($luiTheme, unquote("#{$type}s"))) and
		 (map-has-key(map-get($luiTheme, unquote("#{$type}s")), $name)) {
			@return map-get(map-get($luiTheme, unquote("#{$type}s")), $name);
	} @else {
		@warn "Component #{$name} of type #{$type} was not found !";
	}
}


// Theming
// ===================================

// Core defaults
@import "core/defaults/defaults.values";
// User theme overrides
$myTheme: () !default;
@import "theme.variables";

$luiTheme: map-extend($luiDefaultTheme, $myTheme, true);
