#{$prefix}.nguibs-tooltip {
	position: absolute;
	z-index: $tooltip-z-index;
	pointer-events: none;

	& {
		@import "adjectives/raised.variables";
		-webkit-filter: drop-shadow($x $y $blur $color);
		filter: drop-shadow($x $y $blur $color);
	}

	> [class*="-inner"] {
		padding: $tooltip-padding;
		border-radius: $tooltip-border-radius;
	}

	// Animations
	&.fade:not(.in) { @include lui_is_animated("up fade out"); }
	&.fade.in { @include lui_is_animated("up fade in"); }

	// Arrow
	> [class*="arrow"] {
		width: 0; height: 0;
		@extend #{$prefix}.pointing:after;
		position: absolute;
	}

	& {
		@import "adjectives/pointing.variables";

		&.left > [class*="arrow"], &.right > [class*="arrow"] { top: 50%; transform: translateY(-50%); }

		&.left { margin-left: -$triangle-width; }
		&.left > [class*="arrow"] { @extend #{$prefix}[class*="right pointing"]:after; left: 100%; }

		&.right { margin-right: -$triangle-width; }
		&.right > [class*="arrow"] { @extend #{$prefix}[class*="left pointing"]:after; right: 100%; }

		&.top > [class*="arrow"], &.bottom > [class*="arrow"] { left: 50%; transform: translateX(-50%); }

		&.top { margin-top: -$triangle-width; }
		&.top > [class*="arrow"] { @extend #{$prefix}[class*="bottom pointing"]:after; top: 100%; }

		&.bottom { margin-bottom: -$triangle-width; }
		&.bottom > [class*="arrow"] { @extend #{$prefix}[class*="top pointing"]:after; bottom: 100%; }
	}
}


// Coloring support
// ============================================================

@mixin lui_nguibs_tooltip_coloring($scheme) {
	> [class*="-inner"] {
		background-color: map-get($scheme, color);
		color: map-get($scheme, text);
		@if map-get($scheme, lod) {
			text-shadow: 1px 0 1px darken(map-get($scheme, color), 5);
		}
	}
	&.left > [class*="arrow"] { border-left-color: map-get($scheme, color); }
	&.top > [class*="arrow"] { border-top-color: map-get($scheme, color); }
	&.right > [class*="arrow"] { border-right-color: map-get($scheme, color); }
	&.bottom > [class*="arrow"] { border-bottom-color: map-get($scheme, color); }
};

#{$prefix}.nguibs-tooltip {
	@include lui_nguibs_tooltip_coloring($tooltip-default-coloring);
	@each $name, $scheme in map-gets($luiTheme, globals, colors) {
		&.#{map-get($scheme, class)} {
			@include lui_nguibs_tooltip_coloring($scheme);
		}
	}
}
