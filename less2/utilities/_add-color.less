.lui_add_color(@name, @color, @txt-over, @lightOnDark: false) {
    .lui.button.@{name} {
        .lui_button_coloring_handler(@color, @txt-over, @lightOnDark);
    }

    .lui.label.@{name} {
        .lui_label_coloring_handler(@color, @txt-over, @lightOnDark);
    }

    .lui.side-border.@{name} {
        .lui_side_border_coloring_handler(@color);
    }

    .lui.callout.@{name} {
        .lui_callout_coloring_handler(@color, @txt-over, @lightOnDark);
    }

    .lui.menu.@{name} {
        .lui_menu_coloring_handler(@color);
    }
}


/**
 * Button color
 * --------------------------------------------------------------------------- */

.lui_button_coloring_handler(@color, @txt-over, @lightOnDark: false) {
    // Regular style
    // =====
    &:not(.filling):not(.wired):not(.inverted):not(.flat) {
        background: @color;
        color: @txt-over;
        &:hover {
            background: lighten(@color, 3);
        }
        &:active, &.active {
            background: darken(@color, 3);
        }
        & when (@lightOnDark = true) {
            &.status.loading:not(.has):not(.addon),
            &.status.loading.has.addon > .addon {
                .lui_loader_handle_color(@lightOnDark);
            }
        }
        & when (@lightOnDark = true) {
            text-shadow: 0 1px 1px darken(@color, 5);
        }
    }

    // filling style
    // =====
    &.filling {
        &:hover {
            background: @color;
            color: @txt-over;
            & when (@lightOnDark = true) {
                text-shadow: 0 1px 1px darken(@color, 15);
            }
        }
        &:active, &.active {
            background: darken(@color, 5);
        }
    }

    // Wired style
    // Wired + Inverted is not supported
    // =====
    &.wired:not(.inverted) {
        // Regular
        &:hover,
        &:active,
        &.active, {
            box-shadow: 0 0 0 2px @color inset;
            color: @color;

            &.has.addon > .addon {
                border-color: @color;
            }
        }
    }

    // Inverted style
    // ====
    &.inverted {
        box-shadow: 0 0 0 1px rgba(255, 255, 255, 0.5) inset;
        color: #FFF;

        &:hover {
            box-shadow: 0 0 0 2px @color inset;
            color:@color;
        }

        &.filling:hover {
            color: @txt-over;
        }
    }

    // Status icon
    // ====
    &.status.ok:after, &.status.failure:after {
        color: @txt-over;
    }
}

/**
 * Label
 * --------------------------------------------------------------------------- */
.lui_label_coloring_handler(@color, @txt-over, @lightOnDark) {
    background: @color;

    color: @txt-over;
    & when (@lightOnDark = true) {
        text-shadow: 1px 0 1px darken(@color, 5);
    }
}


/**
 * Menu
 * --------------------------------------------------------------------------- */
.lui_menu_coloring_handler(@color) {
    &.dividing a.item:before, &.dividing a.item:after {
        background-color: @color;
    }
}


/**
 * Side border coloring
 * --------------------------------------------------------------------------- */
 .lui_side_border_coloring_handler(@color) {
     &:after {
         background: @color;
     }
 }


/**
 * Callout color
 * --------------------------------------------------------------------------- */

.lui_callout_coloring_handler(@color, @txt-over, @lightOnDark: false) {
    // Regular style
    // =====
    &:not(.filled) {
        &:after {
            background: @color;
        }
    }

    // Filled style
    // =====
    &.filled {
        background-color: @color;
        border-color: darken(@color, 5);
        &, &:before, a, button {
            color: @txt-over;
        }

        & when (@lightOnDark = true) {
            text-shadow: 0 1px 1px darken(@color, 15);
        }

        > .footer {
            background-color: darken(@color, 3);
        }
    }
}
.lui_side_border_coloring_handler(@color) {
    &:after {
        background: @color;
    }
}
